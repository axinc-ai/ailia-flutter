// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Written for the FFI article
class ailiaFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ailiaFFI(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ailiaFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// \~japanese
  /// @brief ネットワークオブジェクトを作成します。
  /// @param net ネットワークオブジェクトポインタへのポインタ
  /// @param env_id 計算に利用する推論実行環境のID( ailiaGetEnvironment() で取得)  \ref AILIA_ENVIRONMENT_ID_AUTO
  /// にした場合は自動で選択する
  /// @param num_thread スレッド数の上限(  \ref AILIA_MULTITHREAD_AUTO  にした場合は自動で設定)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ネットワークオブジェクトを作成します。
  /// 推論実行環境を自動にした場合はCPUモードになり、BLASが利用できる場合はBLASを利用します。
  /// なお、BLASを利用する場合num_threadは無視される場合があります。
  ///
  /// \~english
  /// @brief Creates a network instance.
  /// @param net A pointer to the network instance pointer
  /// @param env_id The ID of the inference backend used for computation (obtained by  ailiaGetEnvironment() ). It is
  /// selected automatically if  \ref AILIA_ENVIRONMENT_ID_AUTO  is specified.
  /// @param num_thread The upper limit on the number of threads (It is set automatically if  \ref AILIA_MULTITHREAD_AUTO
  /// is specified.)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Creates a network instance.
  /// If the inference backend is set to automatic, CPU mode is used, while if BLAS is available, it uses BLAS.
  /// Note that if BLAS is used, num_thread may be ignored.
  int ailiaCreate(
    ffi.Pointer<ffi.Pointer<AILIANetwork>> net,
    int env_id,
    int num_thread,
  ) {
    return _ailiaCreate(
      net,
      env_id,
      num_thread,
    );
  }

  late final _ailiaCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<AILIANetwork>>, ffi.Int32,
              ffi.Int32)>>('ailiaCreate');
  late final _ailiaCreate = _ailiaCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<AILIANetwork>>, int, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトを初期化します。(ファイルから読み込み)
  /// @param net ネットワークオブジェクトポインタ
  /// @param path prototxtファイルのパス名(MBSC or UTF16)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ファイルから読み込み、ネットワークオブジェクトを初期化します。
  ///
  /// \~english
  /// @brief Initializes the network instance. (Read from file)
  /// @param net A network instance pointer
  /// @param path The path name to the prototxt file (MBSC or UTF16)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads the network instance from a file and initializes it.
  int ailiaOpenStreamFileA(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _ailiaOpenStreamFileA(
      net,
      path,
    );
  }

  late final _ailiaOpenStreamFileAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Int8>)>>('ailiaOpenStreamFileA');
  late final _ailiaOpenStreamFileA = _ailiaOpenStreamFileAPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int8>)>();

  int ailiaOpenStreamFileW(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<wchar_t> path,
  ) {
    return _ailiaOpenStreamFileW(
      net,
      path,
    );
  }

  late final _ailiaOpenStreamFileWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<wchar_t>)>>('ailiaOpenStreamFileW');
  late final _ailiaOpenStreamFileW = _ailiaOpenStreamFileWPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<wchar_t>)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトを初期化します。(ユーザ定義ファイルアクセスコールバック)
  /// @param net ネットワークオブジェクトポインタ
  /// @param fopen_args  \ref AILIA_USER_API_FOPEN に通知される引数ポインタ
  /// @param callback ユーザ定義ファイルアクセスコールバック関数構造体
  /// @param version ファイルアクセスコールバック関数構造体のバージョン( \ref AILIA_FILE_CALLBACK_VERSION )
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ファイルから読み込み、ネットワークオブジェクトを初期化します。
  ///
  /// \~english
  /// @brief Initializes the network instance. (User-defined file access callback)
  /// @param net A network instance pointer
  /// @param fopen_args An argument pointer supplied by AILIA_USER_API_FOPEN
  /// @param callback A struct for the user-defined file access callback function
  /// @param version The version of the struct for the file access callback function ( \ref AILIA_FILE_CALLBACK_VERSION )
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads the network instance from a file and initializes it.
  int ailiaOpenStreamEx(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> fopen_args,
    ailiaFileCallback callback,
    int version,
  ) {
    return _ailiaOpenStreamEx(
      net,
      fopen_args,
      callback,
      version,
    );
  }

  late final _ailiaOpenStreamExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ailiaFileCallback, ffi.Int32)>>('ailiaOpenStreamEx');
  late final _ailiaOpenStreamEx = _ailiaOpenStreamExPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
          ailiaFileCallback, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトを初期化します。(メモリから読み込み)
  /// @param net ネットワークオブジェクトポインタ
  /// @param buf prototxtファイルのデータへのポインタ
  /// @param buf_size prototxtファイルのデータサイズ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// メモリから読み込み、ネットワークオブジェクトを初期化します。
  ///
  /// \~english
  /// @brief Initializes the network instance. (Read from memory)
  /// @param net A network instance pointer
  /// @param buf A pointer to the data in the prototxt file
  /// @param buf_size The data size of the prototxt file
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads the network instance from memory and initializes it.
  int ailiaOpenStreamMem(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> buf,
    int buf_size,
  ) {
    return _ailiaOpenStreamMem(
      net,
      buf,
      buf_size,
    );
  }

  late final _ailiaOpenStreamMemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('ailiaOpenStreamMem');
  late final _ailiaOpenStreamMem = _ailiaOpenStreamMemPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトに重み係数を読み込みます。(ファイルから読み込み)
  /// @param net ネットワークオブジェクトポインタ
  /// @param path protobuf/onnxファイルのパス名(MBSC or UTF16)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ファイルからネットワークオブジェクトに重み係数を読み込みます。
  ///
  /// \~english
  /// @brief Reads weights into a network instance. (Read from file)
  /// @param net A network instance pointer
  /// @param path The path name to the protobuf/onnx file (MBSC or UTF16)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads weights into the network instance from a file.
  int ailiaOpenWeightFileA(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _ailiaOpenWeightFileA(
      net,
      path,
    );
  }

  late final _ailiaOpenWeightFileAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Int8>)>>('ailiaOpenWeightFileA');
  late final _ailiaOpenWeightFileA = _ailiaOpenWeightFileAPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int8>)>();

  int ailiaOpenWeightFileW(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<wchar_t> path,
  ) {
    return _ailiaOpenWeightFileW(
      net,
      path,
    );
  }

  late final _ailiaOpenWeightFileWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<wchar_t>)>>('ailiaOpenWeightFileW');
  late final _ailiaOpenWeightFileW = _ailiaOpenWeightFileWPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<wchar_t>)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトに重み係数を読み込みます。(ユーザ定義ファイルアクセスコールバック)
  /// @param net ネットワークオブジェクトポインタ
  /// @param fopen_args  \ref AILIA_USER_API_FOPEN に通知される引数ポインタ
  /// @param callback ユーザ定義ファイルアクセスコールバック関数構造体
  /// @param version ファイルアクセスコールバック関数構造体のバージョン( \ref AILIA_FILE_CALLBACK_VERSION )
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ファイルからネットワークオブジェクトに重み係数を読み込みます。
  ///
  /// \~english
  /// @brief Reads weights into a network instance. (User-defined file access callback)
  /// @param net A network instance pointer
  /// @param fopen_args An argument pointer supplied by AILIA_USER_API_FOPEN
  /// @param callback A struct for the user-defined file access callback function
  /// @param version The version of the struct for the file access callback function ( \ref AILIA_FILE_CALLBACK_VERSION )
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads weights into the network instance from a file.
  int ailiaOpenWeightEx(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> fopen_args,
    ailiaFileCallback callback,
    int version,
  ) {
    return _ailiaOpenWeightEx(
      net,
      fopen_args,
      callback,
      version,
    );
  }

  late final _ailiaOpenWeightExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ailiaFileCallback, ffi.Int32)>>('ailiaOpenWeightEx');
  late final _ailiaOpenWeightEx = _ailiaOpenWeightExPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
          ailiaFileCallback, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトに重み係数を読み込みます。(メモリから読み込み)
  /// @param net ネットワークオブジェクトポインタ
  /// @param buf protobuf/onnxファイルのデータへのポインタ
  /// @param buf_size protobuf/onnxファイルのデータサイズ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// メモリからネットワークオブジェクトに重み係数を読み込みます。
  ///
  /// \~english
  /// @brief Reads weights into a network instance. (Read from memory)
  /// @param net A network instance pointer
  /// @param buf A pointer to the data in the protobuf/onnx file
  /// @param buf_size The data size of the protobuf/onnx file
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads weights into the network instance from memory.
  int ailiaOpenWeightMem(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> buf,
    int buf_size,
  ) {
    return _ailiaOpenWeightMem(
      net,
      buf,
      buf_size,
    );
  }

  late final _ailiaOpenWeightMemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('ailiaOpenWeightMem');
  late final _ailiaOpenWeightMem = _ailiaOpenWeightMemPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトを破棄します。
  /// @param net ネットワークオブジェクトポインタ
  ///
  /// \~english
  /// @brief It destroys the network instance.
  /// @param net A network instance pointer
  void ailiaDestroy(
    ffi.Pointer<AILIANetwork> net,
  ) {
    return _ailiaDestroy(
      net,
    );
  }

  late final _ailiaDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AILIANetwork>)>>(
          'ailiaDestroy');
  late final _ailiaDestroy =
      _ailiaDestroyPtr.asFunction<void Function(ffi.Pointer<AILIANetwork>)>();

  /// \~japanese
  /// @brief 推論時の入力データの形状を変更します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの形状情報
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// prototxtで定義されている入力形状を変更します。
  /// prototxtに記述されているランクと同じにする必要があります。
  /// なお、重み係数の形状が入力形状に依存しているなどによりエラーが返る場合があります。
  /// prototxtで定義されているランクが4次元未満の場合は未使用の要素に1を設定する必要があります。
  /// prototxtで定義されているランクが5次元以上の場合は ailiaSetInputShapeND() を利用してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Changes the shape of the input data during inference.
  /// @param net A network instance pointer
  /// @param shape Shape information for the input data
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function changes the input shape defined in prototxt.
  /// The shape must have the same rank as the one contained in prototxt.
  /// Note that an error may be returned if the weights are dependent on the input shapes, among other reasons.
  /// The dimension of shape that defined in prototxt is less than 4, the unused element must be set to 1.
  /// The dimension of shape that defined in prototxt has 5 or more, please use  ailiaSetInputShapeND().
  /// This API can be call after call ailiaOpenWeighXXX()
  int ailiaSetInputShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int version,
  ) {
    return _ailiaSetInputShape(
      net,
      shape,
      version,
    );
  }

  late final _ailiaSetInputShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.Uint32)>>('ailiaSetInputShape');
  late final _ailiaSetInputShape = _ailiaSetInputShapePtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int)>();

  /// \~japanese
  /// @brief 推論時の入力データの形状を変更します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの各次元の大きさの配列(dim-1, dim-2, ... ,1, 0)
  /// @param dim shapeの次元
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// prototxtで定義されている入力形状を変更します。
  /// prototxtに記述されているランクと同じにする必要があります。
  /// なお、重み係数の形状が入力形状に依存しているなどによりエラーが返る場合があります。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Changes the shape of the input data during inference.
  /// @param net A network instance pointer
  /// @param shape An array of shape that contains size of each axis (dim-1, dim-2, ... ,1, 0)
  /// @param dim The size of shape.
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function changes the input shape defined in prototxt.
  /// The shape must have the same rank as the one contained in prototxt.
  /// Note that an error may be returned if the weights are dependent on the input shapes, among other reasons.
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSetInputShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> shape,
    int dim,
  ) {
    return _ailiaSetInputShapeND(
      net,
      shape,
      dim,
    );
  }

  late final _ailiaSetInputShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('ailiaSetInputShapeND');
  late final _ailiaSetInputShapeND = _ailiaSetInputShapeNDPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>, int)>();

  /// \~japanese
  /// @brief 推論時の入力データの形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの形状情報
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、5次元以上の場合 \ref AILIA_STATUS_NDIMENSION_SHAPE 、
  /// 形状の一部が未確定の場合 \ref AILIA_STATUS_UNSETTLED_SHAPE 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// 形状が5次元以上の場合は ailiaGetInputDim() 、 ailiaGetInputShapeND() を利用してください。
  /// 形状の一部が未確定の場合、該当する次元の値は0となり、それ以外の次元の値は有効な値が格納されます。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the input data during inference.
  /// @param net A network instance pointer
  /// @param shape Shape information for the input data
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS .
  /// If shape has 5 or more dimension, it returns  \ref AILIA_STATUS_NDIMENSION_SHAPE .
  /// And if shape is not seattled, it returns \ref AILIA_STATUS_UNSETTLED_SHAPE , or an error code otherwise.
  /// @details
  /// When dimension of shape is 5 or more, please use  ailiaGetInputDim() and  ailiaGetInputShapeND().
  /// When shape is not settled, this function stores 0 at unsettled dimension and otherwise stores valid value.
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetInputShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int version,
  ) {
    return _ailiaGetInputShape(
      net,
      shape,
      version,
    );
  }

  late final _ailiaGetInputShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.Uint32)>>('ailiaGetInputShape');
  late final _ailiaGetInputShape = _ailiaGetInputShapePtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int)>();

  /// \~japanese
  /// @brief 推論時の入力データの次元を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dim 入力データの次元の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the dimension of the input data during inference.
  /// @param net A network instance pointer
  /// @param dim The storage location of the dimension
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetInputDim(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> dim,
  ) {
    return _ailiaGetInputDim(
      net,
      dim,
    );
  }

  late final _ailiaGetInputDimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Uint32>)>>('ailiaGetInputDim');
  late final _ailiaGetInputDim = _ailiaGetInputDimPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 推論時の入力データの形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの各次元の大きさの格納先配列(dim-1, dim-2, ... ,1, 0順で格納)
  /// @param dim shapeの次元
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、形状の一部が未確定の場合 \ref AILIA_STATUS_UNSETTLED_SHAPE 、
  /// それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// 形状の一部が未確定の場合、該当する次元の値は0となり、それ以外の次元の値は有効な値が格納されます。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the input data during inference.
  /// @param net A network instance pointer
  /// @param shape The storage location of the shape array. (It stores dim-1, dim-2, ... ,1, 0 order.)
  /// @param dim The size of shape
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS .
  /// And if shape is not seattled, it returns  \ref AILIA_STATUS_UNSETTLED_SHAPE , or an error code otherwise.
  /// @details
  /// When shape is not settled, this function stores 0 at unsettled dimension and otherwise stores valid value.
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetInputShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> shape,
    int dim,
  ) {
    return _ailiaGetInputShapeND(
      net,
      shape,
      dim,
    );
  }

  late final _ailiaGetInputShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('ailiaGetInputShapeND');
  late final _ailiaGetInputShapeND = _ailiaGetInputShapeNDPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>, int)>();

  /// \~japanese
  /// @brief 推論時の出力データの形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 出力データの形状情報
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、5次元以上の場合 \ref AILIA_STATUS_NDIMENSION_SHAPE 、
  /// それ以外のエラーの場合エラーコードを返す。
  /// 形状が5次元以上の場合は ailiaGetOutputDim() 、 ailiaGetOutputShapeND() を利用してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the output data during inference.
  /// @param net A network instance pointer
  /// @param shape Shape information of the output data
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS .
  /// And if shape has 5 or more dimension, it returns  \ref AILIA_STATUS_NDIMENSION_SHAPE , or an error code otherwise.
  /// @details
  /// When dimension of shape is 5 or more, please use  ailiaGetOutputDim() () and  ailiaGetOutputShapeND().
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetOutputShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int version,
  ) {
    return _ailiaGetOutputShape(
      net,
      shape,
      version,
    );
  }

  late final _ailiaGetOutputShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.Uint32)>>('ailiaGetOutputShape');
  late final _ailiaGetOutputShape = _ailiaGetOutputShapePtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int)>();

  /// \~japanese
  /// @brief 推論時の出力データの次元を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dim 出力データの次元の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the dimension of the output data during inference.
  /// @param net A network instance pointer
  /// @param dim The storage location of the dimension
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetOutputDim(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> dim,
  ) {
    return _ailiaGetOutputDim(
      net,
      dim,
    );
  }

  late final _ailiaGetOutputDimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Uint32>)>>('ailiaGetOutputDim');
  late final _ailiaGetOutputDim = _ailiaGetOutputDimPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 推論時の出力データの形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 出力データの各次元の大きさの格納先配列(dim-1, dim-2, ... ,1, 0順で格納)
  /// @param dim shapeの次元
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the output data during inference.
  /// @param net A network instance pointer
  /// @param shape The storage location of the shape array. (It stores dim-1, dim-2, ... ,1, 0 order.)
  /// @param dim The size of shape
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetOutputShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> shape,
    int dim,
  ) {
    return _ailiaGetOutputShapeND(
      net,
      shape,
      dim,
    );
  }

  late final _ailiaGetOutputShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('ailiaGetOutputShapeND');
  late final _ailiaGetOutputShapeND = _ailiaGetOutputShapeNDPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>, int)>();

  /// \~japanese
  /// @brief 推論を行い推論結果を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dest 推論結果の書き出し先バッファにX,Y,Z,Wの順でnumeric型で格納  サイズはネットファイルのoutputSizeとなる
  /// @param dest_size 推論結果の書き出し先バッファのbyte数
  /// @param src 推論データ X,Y,Z,Wの順でnumeric型で格納 サイズはネットファイルのinputSizeとなる
  /// @param src_size 推論データのbyte数
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Performs the inferences and provides the inference result.
  /// @param net A network instance pointer
  /// @param dest The result is stored in the inference result destination buffer as numeric type data in the order of X,
  /// Y, Z, and W. The buffer has the same size as the network file outputSize.
  /// @param dest_size The number of bytes for the destination buffer for the inference result
  /// @param src The input is stored as numeric type data in the order of the inference data X, Y, Z, and W. The input has
  /// the same size as the network file inputSize.
  /// @param src_size The number of bytes of the inference data
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaPredict(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> dest,
    int dest_size,
    ffi.Pointer<ffi.Void> src,
    int src_size,
  ) {
    return _ailiaPredict(
      net,
      dest,
      dest_size,
      src,
      src_size,
    );
  }

  late final _ailiaPredictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ffi.Uint32, ffi.Pointer<ffi.Void>, ffi.Uint32)>>('ailiaPredict');
  late final _ailiaPredict = _ailiaPredictPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の数を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_count blobの数の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時は入出力Blobのみが列挙され、ailiaOpneWeightXXX呼び出し時に中間Blobの列挙が行われます。
  /// そのためailiaOpenStreamXXX呼び出し直後とailiaOpneWeightXXX呼び出し直後で返答する数が変わる場合があります。
  ///
  /// \~english
  /// @brief Gets the amount of internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param blob_count Storage location of the number of blobs
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, this api returuns number of sum of inputs and outputs when after call ailiaOpenStreamXXX.
  /// And, when call ailiaOpenWeightXXX, enumerate and optimzie intermediate blobs.
  /// So, this api may return more count after call ailiaOpenWeightXXX.
  int ailiaGetBlobCount(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> blob_count,
  ) {
    return _ailiaGetBlobCount(
      net,
      blob_count,
    );
  }

  late final _ailiaGetBlobCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Uint32>)>>('ailiaGetBlobCount');
  late final _ailiaGetBlobCount = _ailiaGetBlobCountPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape データの形状情報の格納先
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、5次元以上の場合 \ref AILIA_STATUS_NDIMENSION_SHAPE 、
  /// それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// 形状が5次元以上の場合は ailiaGetBlobDim() 、 ailiaGetBlobShapeND() を利用してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param shape Storage location of the data shape information
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS .
  /// And if shape has 5 or more dimension, it returns  \ref AILIA_STATUS_NDIMENSION_SHAPE , or an error code otherwise.
  /// @details
  /// When dimension of shape is 5 or more, please use  ailiaGetBlobDim() and  ailiaGetBlobShapeND().
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetBlobShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int blob_idx,
    int version,
  ) {
    return _ailiaGetBlobShape(
      net,
      shape,
      blob_idx,
      version,
    );
  }

  late final _ailiaGetBlobShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.Uint32, ffi.Uint32)>>('ailiaGetBlobShape');
  late final _ailiaGetBlobShape = _ailiaGetBlobShapePtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の次元を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dim blobの次元の格納先
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the dimension of the internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param dim The storage location of the dimension
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetBlobDim(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> dim,
    int blob_idx,
  ) {
    return _ailiaGetBlobDim(
      net,
      dim,
      blob_idx,
    );
  }

  late final _ailiaGetBlobDimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('ailiaGetBlobDim');
  late final _ailiaGetBlobDim = _ailiaGetBlobDimPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape blobの各次元の大きさの格納先配列(dim-1, dim-2, ... ,1, 0順で格納)
  /// @param dim shapeの次元
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the amount of internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param shape The storage location of the shape array. (It stores dim-1, dim-2, ... ,1, 0 order.)
  /// @param dim The size of shape
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetBlobShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> shape,
    int dim,
    int blob_idx,
  ) {
    return _ailiaGetBlobShapeND(
      net,
      shape,
      dim,
      blob_idx,
    );
  }

  late final _ailiaGetBlobShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Uint32, ffi.Uint32)>>('ailiaGetBlobShapeND');
  late final _ailiaGetBlobShapeND = _ailiaGetBlobShapeNDPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>, int, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dest 推論結果の書き出し先バッファにX,Y,Z,Wの順でnumeric型で格納
  /// @param dest_size 推論結果の書き出し先バッファのbyte数
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ailiaPredict() または ailiaUpdate() を一度も実行していない場合は \ref AILIA_STATUS_INVALID_STATE が返ります。
  ///
  /// \~english
  /// @brief Gets the internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param dest The result is stored in the inference result destination buffer as numeric type data in the order of X,
  /// Y, Z, and W.
  /// @param dest_size The number of bytes for the inference result destination buffer
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// If  ailiaPredict()  or  ailiaUpdate()  is not run at all, the function returns  \ref AILIA_STATUS_INVALID_STATE .
  int ailiaGetBlobData(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> dest,
    int dest_size,
    int blob_idx,
  ) {
    return _ailiaGetBlobData(
      net,
      dest,
      dest_size,
      blob_idx,
    );
  }

  late final _ailiaGetBlobDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ffi.Uint32, ffi.Uint32)>>('ailiaGetBlobData');
  late final _ailiaGetBlobData = _ailiaGetBlobDataPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の型を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param type データ型の書き出し先バッファ。値は AILIA_DATATYPE_XXX で定義されています。
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Get the type of Blob.
  /// @param net A network instance pointer
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @param type The type of blob is stored to it. Values are defined as AILIA_DATATYPE_XXX.
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetBlobDataType(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Int32> type,
    int blob_idx,
  ) {
    return _ailiaGetBlobDataType(
      net,
      type,
      blob_idx,
    );
  }

  late final _ailiaGetBlobDataTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int32>,
              ffi.Uint32)>>('ailiaGetBlobDataType');
  late final _ailiaGetBlobDataType = _ailiaGetBlobDataTypePtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int32>, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)のインデックスを名前で探し取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @param name 検索するBlob名
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時は入出力Blobのみが検索可能です。中間Blobを検索する場合ailiaOpneWeightXXXを呼び出す必要があります。
  ///
  /// \~english
  /// @brief Searches by name for the index of the internal data (blob) during inference and returns it.
  /// @param net A network instance pointer
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @param name The name of the blob to search for
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, when call this API before call ailiaOpenWeightXXX, can only find inputs and outputs blobs.
  /// If you want find intermediate blobs, please call ailiaOpenWeightXXX before.
  int ailiaFindBlobIndexByName(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> blob_idx,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _ailiaFindBlobIndexByName(
      net,
      blob_idx,
      name,
    );
  }

  late final _ailiaFindBlobIndexByNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Int8>)>>('ailiaFindBlobIndexByName');
  late final _ailiaFindBlobIndexByName =
      _ailiaFindBlobIndexByNamePtr.asFunction<
          int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Int8>)>();

  /// \~japanese
  /// @brief 内部データ(Blob)の名前の出力に必要なバッファのサイズを取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @param buffer_size Blob名の出力に必要なバッファのサイズ(終端null文字分を含む)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時は入出力Blobのみが検索可能です。中間Blobを検索する場合ailiaOpneWeightXXXを呼び出す必要があります。
  ///
  /// \~english
  /// @brief Gets the size of the buffer needed for output of the name of the internal data (blob).
  /// @param net A network instance pointer
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @param buffer_size The size of the buffer needed for output of the blob name (including the null terminator)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, when call this API before call ailiaOpenWeightXXX, can only find inputs and outputs blobs.
  /// If you want find intermediate blobs, please call ailiaOpenWeightXXX before.
  int ailiaGetBlobNameLengthByIndex(
    ffi.Pointer<AILIANetwork> net,
    int blob_idx,
    ffi.Pointer<ffi.Uint32> buffer_size,
  ) {
    return _ailiaGetBlobNameLengthByIndex(
      net,
      blob_idx,
      buffer_size,
    );
  }

  late final _ailiaGetBlobNameLengthByIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('ailiaGetBlobNameLengthByIndex');
  late final _ailiaGetBlobNameLengthByIndex =
      _ailiaGetBlobNameLengthByIndexPtr.asFunction<
          int Function(
              ffi.Pointer<AILIANetwork>, int, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の名前をインデックスで探し取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param buffer Blob名の出力先バッファ
  /// @param buffer_size バッファのサイズ(終端null文字分を含む)
  /// @param blob_idx 検索するblobのインデックス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時は入出力Blobのみが検索可能です。中間Blobを検索する場合ailiaOpneWeightXXXを呼び出す必要があります。
  ///
  /// \~english
  /// @brief Searches by index for the name of the internal data (blob) during inference and returns it.
  /// @param net A network instance pointer
  /// @param buffer The output destination buffer for the blob name
  /// @param buffer_size The size of the buffer (including the null terminator)
  /// @param blob_idx The index of the blob to search for
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, when call this API before call ailiaOpenWeightXXX, can only find inputs and outputs blobs.
  /// If you want find intermediate blobs, please call ailiaOpenWeightXXX before.
  int ailiaFindBlobNameByIndex(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Int8> buffer,
    int buffer_size,
    int blob_idx,
  ) {
    return _ailiaFindBlobNameByIndex(
      net,
      buffer,
      buffer_size,
      blob_idx,
    );
  }

  late final _ailiaFindBlobNameByIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int8>,
              ffi.Uint32, ffi.Uint32)>>('ailiaFindBlobNameByIndex');
  late final _ailiaFindBlobNameByIndex =
      _ailiaFindBlobNameByIndexPtr.asFunction<
          int Function(
              ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int8>, int, int)>();

  /// \~japanese
  /// @brief ネットワークSummary用に必要なバッファのサイズを取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param buffer_size バッファのサイズの格納先(終端null文字分を含む)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the size of the buffer needed for the network summary.
  /// @param net A network instance pointer
  /// @param buffer_size The storage location of the buffer size (including the null terminator)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetSummaryLength(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> buffer_size,
  ) {
    return _ailiaGetSummaryLength(
      net,
      buffer_size,
    );
  }

  late final _ailiaGetSummaryLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Uint32>)>>('ailiaGetSummaryLength');
  late final _ailiaGetSummaryLength = _ailiaGetSummaryLengthPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 各Blobの名前と形状を表示します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param buffer Summaryの出力先
  /// @param buffer_size 出力バッファのサイズ(終端null文字分を含む)。 ailiaGetSummaryLength()
  /// で取得した値を設定してください。
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Shows the name and shape of each blob.
  /// @param net A network instance pointer
  /// @param buffer The output destination of the summary
  /// @param buffer_size The size of the output buffer (including the null terminator). Set the value obtained by
  /// ailiaGetSummaryLength() .
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSummary(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Int8> buffer,
    int buffer_size,
  ) {
    return _ailiaSummary(
      net,
      buffer,
      buffer_size,
    );
  }

  late final _ailiaSummaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int8>,
              ffi.Uint32)>>('ailiaSummary');
  late final _ailiaSummary = _ailiaSummaryPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int8>, int)>();

  /// \~japanese
  /// @brief 入力データ(Blob)の数を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param input_blob_count 入力blobの数の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、入力Blobの列挙はailiaOpenStreamXXX呼び出し時に行われますが変更可能な重み(input付きinitialzier)の列挙はailiaOpneWeightXXX呼び出し時に行われます。
  /// そのためailiaOpenStreamXXX呼び出し直後とailiaOpneWeightXXX呼び出し直後で返答する数が変わる場合があります。
  ///
  /// \~english
  /// @brief Get the number of input data blobs.
  /// @param net A network instance pointer
  /// @param input_blob_count Storage location of the number of input blobs
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, this api returuns number of inputs when after call ailiaOpenStreamXXX.
  /// And, when call ailiaOpenWeightXXX, enumerate and optimzie initializer with input blobs.
  /// So, this api may return more count after call ailiaOpenWeightXXX.
  int ailiaGetInputBlobCount(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> input_blob_count,
  ) {
    return _ailiaGetInputBlobCount(
      net,
      input_blob_count,
    );
  }

  late final _ailiaGetInputBlobCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Uint32>)>>('ailiaGetInputBlobCount');
  late final _ailiaGetInputBlobCount = _ailiaGetInputBlobCountPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 入力データ(Blob)のインデックスを取得します
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_idx blobのインデックス(0～ ailiaGetBlobCount() -1)
  /// @param input_blob_idx 入力blob内でのインデックス(0～ ailiaGetInputBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時に列挙されたinput_blob_idx及びblob_idxは保持されるためailiaOpneWeightXXX呼び出し後も同じ値が返ることが保証されます。
  ///
  /// \~english
  /// @brief Get the blob index of the input data.
  /// @param net A network instance pointer
  /// @param blob_idx index of the blob (between 0 and  ailiaGetBlobCount() -1)
  /// @param input_blob_idx index among the input blobs (between 0 and  ailiaGetInputBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, we guarantee that input_blob_idx and blob_idx which enumerate when call ailiaOpenStreamXXX are not changed when call ailiaOpneWeightXXX.
  int ailiaGetBlobIndexByInputIndex(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> blob_idx,
    int input_blob_idx,
  ) {
    return _ailiaGetBlobIndexByInputIndex(
      net,
      blob_idx,
      input_blob_idx,
    );
  }

  late final _ailiaGetBlobIndexByInputIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('ailiaGetBlobIndexByInputIndex');
  late final _ailiaGetBlobIndexByInputIndex =
      _ailiaGetBlobIndexByInputIndexPtr.asFunction<
          int Function(
              ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>, int)>();

  /// \~japanese
  /// @brief 指定したBlobに入力データを与えます。
  /// @param net ネットワークオブジェクトポインタ
  /// @param src 推論データ X,Y,Z,Wの順でnumeric型で格納
  /// @param src_size 推論データのbyte数
  /// @param blob_idx 入力するblobのインデックス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 複数入力があるネットワークなどで入力を指定する場合に用います。
  /// blob_idxで入力レイヤーのblob以外のものを指定した場合、 \ref AILIA_STATUS_INVALID_ARGUMENT が返ります。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Provides the specified blob with the input data.
  /// @param net A network instance pointer
  /// @param src The inference data is stored as numeric type data in the order of X, Y, Z, and W.
  /// @param src_size The number of bytes of the inference data
  /// @param blob_idx The index of the blob for input
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function is used to specify the input on networks with multiple inputs.
  /// If something other than a blob in the input layer is specified for blob_idx, the function returns  \ref
  /// AILIA_STATUS_INVALID_ARGUMENT .
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSetInputBlobData(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> src,
    int src_size,
    int blob_idx,
  ) {
    return _ailiaSetInputBlobData(
      net,
      src,
      src_size,
      blob_idx,
    );
  }

  late final _ailiaSetInputBlobDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ffi.Uint32, ffi.Uint32)>>('ailiaSetInputBlobData');
  late final _ailiaSetInputBlobData = _ailiaSetInputBlobDataPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int, int)>();

  /// \~japanese
  /// @brief 指定したBlobの形状を変更します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの形状情報
  /// @param blob_idx 変更するblobのインデックス
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 複数入力があるネットワークなどで入力形状を変更する場合に用います。
  /// blob_idxは入力レイヤーのblob以外のものを指定した場合 \ref AILIA_STATUS_INVALID_ARGUMENT が返ります。
  /// その他の注意点は ailiaSetInputShape() の解説を参照してください。
  /// 入力形状のランクが5次元以上の場合は ailiaSetInputBlobShapeND() を利用してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Change the shape of the blob given by its index
  /// @param net network object pointer
  /// @param shape new shape of the blob
  /// @param blob_idx index referencing the blob to reshape
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// In case of success,  \ref AILIA_STATUS_SUCCESS , and otherwise the coresponding error code.
  /// @details
  /// This is useful to change the network input shape in a context where there are several input blobs.
  /// If blob_idx does not correspond to an input layer,  \ref AILIA_STATUS_INVALID_ARGUMENT  is returned.
  /// For other related remarks, see the documentation of  ailiaSetInputShape().
  /// If dimension of shape has 5 or more, please use  ailiaSetInputBlobShapeND().
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSetInputBlobShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int blob_idx,
    int version,
  ) {
    return _ailiaSetInputBlobShape(
      net,
      shape,
      blob_idx,
      version,
    );
  }

  late final _ailiaSetInputBlobShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.Uint32, ffi.Uint32)>>('ailiaSetInputBlobShape');
  late final _ailiaSetInputBlobShape = _ailiaSetInputBlobShapePtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int, int)>();

  /// \~japanese
  /// @brief 指定したBlobの形状を変更します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの各次元の大きさの配列(dim-1, dim-2, ... ,1, 0)
  /// @param dim shapeの次元
  /// @param blob_idx 変更するblobのインデックス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 複数入力があるネットワークなどで入力形状を変更する場合に用います。
  /// blob_idxは入力レイヤーのblob以外のものを指定した場合 \ref AILIA_STATUS_INVALID_ARGUMENT が返ります。
  /// その他の注意点は ailiaSetInputShapeND() の解説を参照してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Change the shape of the blob given by its index
  /// @param net network object pointer
  /// @param shape An array of shape that contains size of each axis (dim-1, dim-2, ... ,1, 0)
  /// @param dim The size of shape.
  /// @param blob_idx index referencing the blob to reshape
  /// @return
  /// In case of success,  \ref AILIA_STATUS_SUCCESS , and otherwise the coresponding error code.
  /// @details
  /// This is useful to change the network input shape in a context where there are several input blobs.
  /// If blob_idx does not correspond to an input layer,  \ref AILIA_STATUS_INVALID_ARGUMENT  is returned.
  /// For other related remarks, see the documentation of  ailiaSetInputShapeND().
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSetInputBlobShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> shape,
    int dim,
    int blob_idx,
  ) {
    return _ailiaSetInputBlobShapeND(
      net,
      shape,
      dim,
      blob_idx,
    );
  }

  late final _ailiaSetInputBlobShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Uint32, ffi.Uint32)>>('ailiaSetInputBlobShapeND');
  late final _ailiaSetInputBlobShapeND =
      _ailiaSetInputBlobShapeNDPtr.asFunction<
          int Function(
              ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>, int, int)>();

  /// \~japanese
  /// @brief 指定したBlob間でデータをコピーします
  ///
  /// @param dst_net コピー先のblobが含まれるネットワークオブジェクトポインター
  /// @param dst_blob_idx コピー先のblobのインデックス
  /// @param src_net コピー元のblobが含まれるネットワークオブジェクトポインター
  /// @param src_blob_idx コピー元のblobのインデックス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 指定したネットワークのBlobをコピーします。コピー元とコピー先のネットワークは別のものを指定することができます。
  /// コピー先のBlobは入力Blobのインデックスを、コピー元のBlobは任意のBlobのインデックスを指定してください。
  /// コピー先にその他のBlobを指定した場合 \ref AILIA_STATUS_INVALID_ARGUMENT が返ります。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Perform copies  between blobs that specified.
  ///
  /// @param dst_net The network object pointer that contains destination blob
  /// @param dst_blob_idx The index of destination blob
  /// @param src_net The network object pointer that contains source blob
  /// @param src_blob_idx The index of source blob
  /// @return
  /// In case of success,  \ref AILIA_STATUS_SUCCESS , and otherwise the coresponding error code.
  /// @details
  /// Perform copy blobs between specified network. It accepts copy over different network.
  /// The src_blob_index must be specify blob index that inputs of src_net, and the dst_blob_index mut be specify blob index that outputs of dst_net.
  /// If specify index of other blob for dst_blob_idx , this function returns \ref AILIA_STATUS_INVALID_ARGUMENT .
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaCopyBlobData(
    ffi.Pointer<AILIANetwork> dst_net,
    int dst_blob_idx,
    ffi.Pointer<AILIANetwork> src_net,
    int src_blob_idx,
  ) {
    return _ailiaCopyBlobData(
      dst_net,
      dst_blob_idx,
      src_net,
      src_blob_idx,
    );
  }

  late final _ailiaCopyBlobDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Uint32,
              ffi.Pointer<AILIANetwork>, ffi.Uint32)>>('ailiaCopyBlobData');
  late final _ailiaCopyBlobData = _ailiaCopyBlobDataPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, int, ffi.Pointer<AILIANetwork>, int)>();

  /// \~japanese
  /// @brief 事前に指定した入力データで推論を行います。
  /// @param net ネットワークオブジェクトポインタ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ailiaSetInputBlobData() を用いて入力を与えた場合などに用います。
  /// 推論結果は ailiaGetBlobData() で取得してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Makes inferences with the input data specified in advance.
  /// @param net A network instance pointer
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function is used when, for example, the input is provided with  ailiaSetInputBlobData() .
  /// Get the inference result with  ailiaGetBlobData() .
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaUpdate(
    ffi.Pointer<AILIANetwork> net,
  ) {
    return _ailiaUpdate(
      net,
    );
  }

  late final _ailiaUpdatePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AILIANetwork>)>>(
      'ailiaUpdate');
  late final _ailiaUpdate =
      _ailiaUpdatePtr.asFunction<int Function(ffi.Pointer<AILIANetwork>)>();

  /// \~japanese
  /// @brief 出力データ(Blob)の数を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param output_blob_count 出力blobの数の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Get the number of output data blobs.
  /// @param net A network instance pointer
  /// @param output_blob_count Storage location for the number of output blobs.
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  int ailiaGetOutputBlobCount(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> output_blob_count,
  ) {
    return _ailiaGetOutputBlobCount(
      net,
      output_blob_count,
    );
  }

  late final _ailiaGetOutputBlobCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Uint32>)>>('ailiaGetOutputBlobCount');
  late final _ailiaGetOutputBlobCount = _ailiaGetOutputBlobCountPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 出力データ(Blob)のインデックスを取得します
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_idx blobのインデックス(0～ ailiaGetBlobCount() -1)
  /// @param output_blob_idx 出力blob内でのインデックス(0～ ailiaGetOutputBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Get the blob index of the input data blob.
  /// @param net A network instance pointer
  /// @param blob_idx blob index (between 0 and  ailiaGetBlobCount() -1)
  /// @param output_blob_idx index among output blobs (between 0 and  ailiaGetOutputBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  int ailiaGetBlobIndexByOutputIndex(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Uint32> blob_idx,
    int output_blob_idx,
  ) {
    return _ailiaGetBlobIndexByOutputIndex(
      net,
      blob_idx,
      output_blob_idx,
    );
  }

  late final _ailiaGetBlobIndexByOutputIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('ailiaGetBlobIndexByOutputIndex');
  late final _ailiaGetBlobIndexByOutputIndex =
      _ailiaGetBlobIndexByOutputIndexPtr.asFunction<
          int Function(
              ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Uint32>, int)>();

  /// \~japanese
  /// @brief ailiaがグローバルに確保したGPUリソース等を解放します
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返します。
  /// @details
  /// ailiaCreate() で作成したインスタンス全てを ailiaDestroy() で解放した状態で呼び出す必要があります。
  /// それ以外の状態で呼び出された場合 #ref AILIA_STATUS_INVALID_STATE を返します。
  /// Windows 環境の場合、DllMain 等からこの API を呼び出すとデッドロックする可能性があります。
  ///
  /// \~english
  /// @brief Release GPU and other resources that have been globally allocated with ailia.
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// It must be called with all ailia instances created by ailiaCreate() released by ailiaDestroy().
  /// Otherwise, #ref AILIA_STATUS_INVALID_STATE will be returned.
  /// Call this API from DllMain() on Windows OS, there is possibility of a deadlock.
  int ailiaFinalize() {
    return _ailiaFinalize();
  }

  late final _ailiaFinalizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('ailiaFinalize');
  late final _ailiaFinalize = _ailiaFinalizePtr.asFunction<int Function()>();

  /// \~japanese
  /// @brief 一時キャッシュディレクトリを指定します
  /// @param cache_dir 一時キャッシュディレクトリ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 指定したキャッシュディレクトリは推論実行環境毎に最適化したマシンコードを生成して保存するためにシステムが利用します。
  /// ailia の実行開始時に一度だけ呼び出してください。二回目以降の呼び出しに対しては無視して成功を返します。
  /// 複数スレッドから呼び出された場合も内部で排他制御しているので特に問題は発生しません。
  /// Vulkan のシェーダーキャッシュ機能など、この API を呼ぶまで利用できないものがあります。
  /// cache_dirにはContext.getCacheDir()で取得したファイルパスを指定してください。
  ///
  /// \~english
  /// @brief Specifies a temporary cache directory.
  /// @param cache_dir Temporary cache directory
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This system uses the specified cache directory to generate and store machine code optimized for each inference
  /// backend. Call only once at the start of execution of ailia. It ignores any second and subsequent calls, and
  /// automatically returns success. There is no particular problem if it is called from multiple threads, as it provides
  /// exclusive control internally. Some functions, such as Vulkan shader cache, cannot be used until this API function is
  /// called. Specify the file path obtained by Context.getCacheDir() for cache_dir.
  int ailiaSetTemporaryCachePathA(
    ffi.Pointer<ffi.Int8> cache_dir,
  ) {
    return _ailiaSetTemporaryCachePathA(
      cache_dir,
    );
  }

  late final _ailiaSetTemporaryCachePathAPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'ailiaSetTemporaryCachePathA');
  late final _ailiaSetTemporaryCachePathA = _ailiaSetTemporaryCachePathAPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int ailiaSetTemporaryCachePathW(
    ffi.Pointer<wchar_t> cache_dir,
  ) {
    return _ailiaSetTemporaryCachePathW(
      cache_dir,
    );
  }

  late final _ailiaSetTemporaryCachePathWPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          'ailiaSetTemporaryCachePathW');
  late final _ailiaSetTemporaryCachePathW = _ailiaSetTemporaryCachePathWPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>)>();

  /// \~japanese
  /// @brief 利用可能な計算環境(CPU, GPU)の数を取得します
  /// @param env_count 計算環境情報の数の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the number of available computational environments (CPU, GPU).
  /// @param env_count The storage location of the number of computational environment information
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaGetEnvironmentCount(
    ffi.Pointer<ffi.Uint32> env_count,
  ) {
    return _ailiaGetEnvironmentCount(
      env_count,
    );
  }

  late final _ailiaGetEnvironmentCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>)>>(
          'ailiaGetEnvironmentCount');
  late final _ailiaGetEnvironmentCount = _ailiaGetEnvironmentCountPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 計算環境の一覧を取得します
  /// @param env 計算環境情報の格納先(AILIANetworkインスタンスを破棄するまで有効)
  /// @param env_idx 計算環境情報のインデックス(0～ ailiaGetEnvironmentCount() -1)
  /// @param version AILIA_ENVIRONMENT_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the list of computational environments.
  /// @param env The storage location of the computational environment information (valid until the AILIANetwork instance
  /// is destroyed)
  /// @param env_idx The index of the computational environment information (0 to  ailiaGetEnvironmentCount() -1)
  /// @param version AILIA_ENVIRONMENT_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaGetEnvironment(
    ffi.Pointer<ffi.Pointer<AILIAEnvironment>> env,
    int env_idx,
    int version,
  ) {
    return _ailiaGetEnvironment(
      env,
      env_idx,
      version,
    );
  }

  late final _ailiaGetEnvironmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<AILIAEnvironment>>,
              ffi.Uint32, ffi.Uint32)>>('ailiaGetEnvironment');
  late final _ailiaGetEnvironment = _ailiaGetEnvironmentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<AILIAEnvironment>>, int, int)>();

  /// \~japanese
  /// @brief 選択された計算環境を取得します
  /// @param net ネットワークオブジェクトポインタ
  /// @param env 計算環境情報の格納先(AILIANetworkインスタンスを破棄するまで有効)
  /// @param version AILIA_ENVIRONMENT_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the selected computational environment.
  /// @param net A network instance pointer
  /// @param env The storage location of the computational environment information (valid until the AILIANetwork instance
  /// is destroyed)
  /// @param version AILIA_ENVIRONMENT_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaGetSelectedEnvironment(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Pointer<AILIAEnvironment>> env,
    int version,
  ) {
    return _ailiaGetSelectedEnvironment(
      net,
      env,
      version,
    );
  }

  late final _ailiaGetSelectedEnvironmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Pointer<AILIAEnvironment>>,
              ffi.Uint32)>>('ailiaGetSelectedEnvironment');
  late final _ailiaGetSelectedEnvironment =
      _ailiaGetSelectedEnvironmentPtr.asFunction<
          int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Pointer<AILIAEnvironment>>, int)>();

  /// \~japanese
  /// @brief 推論時のメモリの使用方針を設定します
  /// @param net ネットワークオブジェクトポインタ
  /// @param mode メモリモード(論理和で複数指定可) AILIA_MEMORY_XXX (デフォルト: \ref AILIA_MEMORY_REDUCE_CONSTANT )
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// メモリの使用方針を変更します。 \ref AILIA_MEMORY_NO_OPTIMIZATION 以外を指定した場合は、
  /// 推論時に確保する中間バッファーを開放するため、推論時のメモリ使用量を削減することができます。
  /// ailiaCreate() の直後に指定する必要があります。ailiaOpenを呼び出した後は変更することができません。
  /// なお、中間バッファーを開放するように指定した場合、該当するBlobに対し、 ailiaGetBlobData() を呼び出すと
  /// \ref AILIA_STATUS_DATA_HIDDEN エラーが返ります。
  ///
  /// \~english
  /// @brief Set the memory usage policy for inference
  /// @param net A network instance pointer
  /// @param mode Memory mode (Multiple specifications possible with logical sum) AILIA_MEMORY_XXX (Default : \ref
  /// AILIA_MEMORY_REDUCE_CONSTANT )
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Change the memory usage policy.
  /// If a value other than  \ref AILIA_MEMORY_NO_OPTIMIZATION  is specified,
  /// the intermediate buffer secured during inference will be released, so the memory usage during inference can be
  /// reduced. Must be specified immediately after  ailiaCreate() . It cannot be changed after calling ailiaOpen. If you
  /// specify to release the intermediate buffer, calling  ailiaGetBlobData()  for the corresponding blob will return an
  /// \ref AILIA_STATUS_DATA_HIDDEN  error.
  int ailiaSetMemoryMode(
    ffi.Pointer<AILIANetwork> net,
    int mode,
  ) {
    return _ailiaSetMemoryMode(
      net,
      mode,
    );
  }

  late final _ailiaSetMemoryModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIANetwork>, ffi.Uint32)>>('ailiaSetMemoryMode');
  late final _ailiaSetMemoryMode = _ailiaSetMemoryModePtr
      .asFunction<int Function(ffi.Pointer<AILIANetwork>, int)>();

  /// \~japanese
  /// @brief 推論時のレイヤー統合を無効化します
  /// @param net ネットワークオブジェクトポインタ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// レイヤー統合により取得できなくなるBlobを取得する必要がある場合などに用います。
  /// ailiaCreate() の直後に指定する必要があります。ailiaOpenを呼び出した後は変更することができません。
  /// なお、レイヤー統合を無効化すると推論速度が低下する場合があります。
  ///
  /// \~english
  /// @brief Disalbe layer fusion optimaization for inference
  /// @param net A network instance pointer
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This api use to get blob that remove by layer fusion optimization.
  /// Must be specified immediately after  ailiaCreate() . It cannot be changed after calling ailiaOpen.
  /// Note: When disable layer fusion optimization, inference speed may be down.
  int ailiaDisableLayerFusion(
    ffi.Pointer<AILIANetwork> net,
  ) {
    return _ailiaDisableLayerFusion(
      net,
    );
  }

  late final _ailiaDisableLayerFusionPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<AILIANetwork>)>>(
      'ailiaDisableLayerFusion');
  late final _ailiaDisableLayerFusion = _ailiaDisableLayerFusionPtr
      .asFunction<int Function(ffi.Pointer<AILIANetwork>)>();

  /// \~japanese
  /// @brief プロファイルモードをセットします
  /// @param net          ネットワークオブジェクトポインタ
  /// @param mode         プロファイルモード
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// プロファイルモードを指定します。デフォルトは無効です。
  /// ailiaOpenStreamXXXを呼び出したあとに呼び出してください。
  /// プロファイルモードを有効にした場合、 ailiaSummary() の出力にプロファイル結果が追加されます。
  ///
  /// \~english
  /// @brief Set the profile mode.
  /// @param net          The network instance pointer
  /// @param mode         Profile mode AILIA_PROFILE_XXX (Default : \ref AILIA_PROFILE_DISABLE )
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Set the profile mode. The default is profile disabled.
  /// Call it after calling ailiaOpenStreamXXX.
  /// When profile mode is enabled, you can get profile result via  ailiaSummary() .
  int ailiaSetProfileMode(
    ffi.Pointer<AILIANetwork> net,
    int mode,
  ) {
    return _ailiaSetProfileMode(
      net,
      mode,
    );
  }

  late final _ailiaSetProfileModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIANetwork>, ffi.Uint32)>>('ailiaSetProfileMode');
  late final _ailiaSetProfileMode = _ailiaSetProfileModePtr
      .asFunction<int Function(ffi.Pointer<AILIANetwork>, int)>();

  /// \~japanese
  /// @brief ステータスコードに対応する文字列を返します。
  /// @param status_code   ステータスコード
  /// @return
  /// ステータスコードに対応する文字列。
  /// @details
  /// 返値は解放する必要はありません。
  /// 返された文字列は ailia のライブラリ(ailia.dll, libailia.so 等)をアンロードするまで有効です。
  /// AILIANetwork のインスタンスがある場合は ailiaGetErrorDetail() でエラーの詳細を取得できます。
  ///
  /// \~english
  /// @brief Returns the string describing given status code.
  /// @param status_code    Status code
  /// @return
  /// String describing given status code.
  /// Retuned string is valid until the library of ailia (ailia.dll, libailia.so, etc) is unloaded.
  /// @details
  /// The return value does not have to be released.
  /// If an instance of AILIANetwork is exist, ailiaGetErrorDetail() can be used to get the detail of the error.
  ffi.Pointer<ffi.Int8> ailiaGetStatusString(
    int status_code,
  ) {
    return _ailiaGetStatusString(
      status_code,
    );
  }

  late final _ailiaGetStatusStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'ailiaGetStatusString');
  late final _ailiaGetStatusString = _ailiaGetStatusStringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  /// \~japanese
  /// @brief エラーの詳細を返します
  /// @param net   ネットワークオブジェクトポインタ
  /// @return
  /// エラー詳細
  /// @details
  /// 返値は解放する必要はありません。
  /// 文字列の有効期間は次にailiaのAPIを呼ぶまでです。
  /// モデルが暗号化されている場合は空文字を返します。
  ///
  /// \~english
  /// @brief Returns the details of errors.
  /// @param net   The network instance pointer
  /// @return
  /// Error details
  /// @details
  /// The return value does not have to be released.
  /// The string is valid until the next ailia API function is called.
  /// If model is encrypted, this function returns empty string.
  ffi.Pointer<ffi.Int8> ailiaGetErrorDetail(
    ffi.Pointer<AILIANetwork> net,
  ) {
    return _ailiaGetErrorDetail(
      net,
    );
  }

  late final _ailiaGetErrorDetailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<AILIANetwork>)>>('ailiaGetErrorDetail');
  late final _ailiaGetErrorDetail = _ailiaGetErrorDetailPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<AILIANetwork>)>();

  /// \~japanese
  /// @brief ライブラリバージョンを取得します
  /// @return
  /// バージョン番号
  /// @details
  /// 返値は解放する必要はありません。
  ///
  /// \~english
  /// @brief Get the version of the library.
  /// @return
  /// Version number
  /// @details
  /// The return value does not have to be released.
  ffi.Pointer<ffi.Int8> ailiaGetVersion() {
    return _ailiaGetVersion();
  }

  late final _ailiaGetVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'ailiaGetVersion');
  late final _ailiaGetVersion =
      _ailiaGetVersionPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  /// \~japanese
  /// @brief 画像のフォーマットを変換します。
  /// @param dst                  変換後画像の格納先(numeric型、sizeof(float) * dst_width * dst_height *
  /// チャンネル数(解説参照)以上のサイズを確保すること)
  /// @param dst_width            変換後画像の横幅
  /// @param dst_height           変換後画像の高さ
  /// @param dst_format           変換後画像の形式 (AILIA_NETWORK_IMAGE_FORMAT_*)
  /// @param dst_channel          変換後画像のチャンネル順 (AILIA_NETWORK_IMAGE_CHANNEL_*)
  /// @param dst_range            変換後画像のレンジ (AILIA_NETWORK_IMAGE_RANGE_*)
  /// @param src                  変換元画像の格納先(32bpp)
  /// @param src_stride           変換元画像のラインバイト数
  /// @param src_width            変換元画像の横幅
  /// @param src_height           変換元画像の高さ
  /// @param src_format           変換元画像の形式 (AILIA_IMAGE_FORMAT_*)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 画像フォーマットを変更します。dst_formatが \ref AILIA_NETWORK_IMAGE_FORMAT_BGR
  /// もしくはAILIA_NETWORK_IMAGE_FORMAT_RGB の場合、チャンネル数は3,  \ref AILIA_NETWORK_IMAGE_FORMAT_GRAY
  /// の場合チャンネル数は1となります。
  ///
  /// \~english
  /// @brief Converts image formats.
  /// @param dst                  The storage location of the image after conversion (numeric type; a size of sizeof(float)
  /// * dst_width * dst_height * num_of_channel(See Description) or more must be allocated.)
  /// @param dst_width            The width of the image after conversion
  /// @param dst_height           The height of the image after conversion
  /// @param dst_format           The format of the image after conversion (AILIA_NETWORK_IMAGE_FORMAT_*)
  /// @param dst_channel          The channel order of the image after conversion (AILIA_NETWORK_IMAGE_CHANNEL_*)
  /// @param dst_range            The range of the image after conversion (AILIA_NETWORK_IMAGE_RANGE_*)
  /// @param src                  The storage location of the source image (32 bpp)
  /// @param src_stride           The line byte number of the source image
  /// @param src_width            The width of the source image
  /// @param src_height           The height of the source image
  /// @param src_format           The format of the source image (AILIA_IMAGE_FORMAT_*)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function converts image formats. If dst_format is set to  \ref AILIA_NETWORK_IMAGE_FORMAT_BGR  or  \ref
  /// AILIA_NETWORK_IMAGE_FORMAT_RGB , the number of channels is 3, otherwise if set to  \ref
  /// AILIA_NETWORK_IMAGE_FORMAT_GRAY , the number of channels is 1.
  int ailiaFormatConvert(
    ffi.Pointer<ffi.Void> dst,
    int dst_width,
    int dst_height,
    int dst_format,
    int dst_channel,
    int dst_range,
    ffi.Pointer<ffi.Void> src,
    int src_stride,
    int src_width,
    int src_height,
    int src_format,
  ) {
    return _ailiaFormatConvert(
      dst,
      dst_width,
      dst_height,
      dst_format,
      dst_channel,
      dst_range,
      src,
      src_stride,
      src_width,
      src_height,
      src_format,
    );
  }

  late final _ailiaFormatConvertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaFormatConvert');
  late final _ailiaFormatConvert = _ailiaFormatConvertPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, int, int,
          ffi.Pointer<ffi.Void>, int, int, int, int)>();

  /// \~japanese
  /// @brief 識別オブジェクトを作成します。
  /// @param classifier 識別オブジェクトポインタへのポインタ
  /// @param net        ネットワークオブジェクトポインタ
  /// @param format     ネットワークの画像フォーマット （AILIA_NETWORK_IMAGE_FORMAT_*）
  /// @param channel    ネットワークの画像チャンネル (AILIA_NETWORK_IMAGE_CHANNEL_*)
  /// @param range      ネットワークの画像レンジ （AILIA_NETWORK_IMAGE_RANGE_*）
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Creates a classifier instance.
  /// @param classifier A pointer to a classifier instance pointer
  /// @param net        A network instance pointer
  /// @param format     The network image format (AILIA_NETWORK_IMAGE_FORMAT_*)
  /// @param channel    The network image channel (AILIA_NETWORK_IMAGE_CHANNEL_*)
  /// @param range      The network image range (AILIA_NETWORK_IMAGE_RANGE_*)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaCreateClassifier(
    ffi.Pointer<ffi.Pointer<AILIAClassifier>> classifier,
    ffi.Pointer<AILIANetwork> net,
    int format,
    int channel,
    int range,
  ) {
    return _ailiaCreateClassifier(
      classifier,
      net,
      format,
      channel,
      range,
    );
  }

  late final _ailiaCreateClassifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<AILIAClassifier>>,
              ffi.Pointer<AILIANetwork>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaCreateClassifier');
  late final _ailiaCreateClassifier = _ailiaCreateClassifierPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<AILIAClassifier>>,
          ffi.Pointer<AILIANetwork>, int, int, int)>();

  /// \~japanese
  /// @brief 識別オブジェクトを破棄します。
  /// @param classifier 識別オブジェクトポインタ
  ///
  /// \~english
  /// @brief Destroys the classifier instance.
  /// @param classifier A classifier instance pointer
  void ailiaDestroyClassifier(
    ffi.Pointer<AILIAClassifier> classifier,
  ) {
    return _ailiaDestroyClassifier(
      classifier,
    );
  }

  late final _ailiaDestroyClassifierPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AILIAClassifier>)>>(
      'ailiaDestroyClassifier');
  late final _ailiaDestroyClassifier = _ailiaDestroyClassifierPtr
      .asFunction<void Function(ffi.Pointer<AILIAClassifier>)>();

  /// \~japanese
  /// @brief 物体識別を行います。
  /// @param classifier                  識別オブジェクトポインタ
  /// @param src                         画像データ(32bpp)
  /// @param src_stride                  1ラインのバイト数
  /// @param src_width                   画像幅
  /// @param src_height                  画像高さ
  /// @param src_format                  画像のフォーマット (AILIA_IMAGE_FORMAT_*)
  /// @param max_class_count             識別結果の数の最大
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Performs object classification.
  /// @param classifier                  A classifier instance pointer
  /// @param src                         Image data (32 bpp)
  /// @param src_stride                  The number of bytes in 1 line
  /// @param src_width                   Image width
  /// @param src_height                  Image height
  /// @param src_format                  Image format (AILIA_IMAGE_FORMAT_*)
  /// @param max_class_count             The maximum number of classification results
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaClassifierCompute(
    ffi.Pointer<AILIAClassifier> classifier,
    ffi.Pointer<ffi.Void> src,
    int src_stride,
    int src_width,
    int src_height,
    int src_format,
    int max_class_count,
  ) {
    return _ailiaClassifierCompute(
      classifier,
      src,
      src_stride,
      src_width,
      src_height,
      src_format,
      max_class_count,
    );
  }

  late final _ailiaClassifierComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIAClassifier>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaClassifierCompute');
  late final _ailiaClassifierCompute = _ailiaClassifierComputePtr.asFunction<
      int Function(ffi.Pointer<AILIAClassifier>, ffi.Pointer<ffi.Void>, int,
          int, int, int, int)>();

  /// \~japanese
  /// @brief 識別結果の数を取得します。
  /// @param classifier 識別オブジェクトポインタ
  /// @param cls_count  クラス数
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the number of classification results.
  /// @param classifier A classifier instance pointer
  /// @param cls_count  The number of classes
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaClassifierGetClassCount(
    ffi.Pointer<AILIAClassifier> classifier,
    ffi.Pointer<ffi.Uint32> cls_count,
  ) {
    return _ailiaClassifierGetClassCount(
      classifier,
      cls_count,
    );
  }

  late final _ailiaClassifierGetClassCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIAClassifier>,
              ffi.Pointer<ffi.Uint32>)>>('ailiaClassifierGetClassCount');
  late final _ailiaClassifierGetClassCount =
      _ailiaClassifierGetClassCountPtr.asFunction<
          int Function(
              ffi.Pointer<AILIAClassifier>, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 識別結果を取得します。
  /// @param classifier 識別オブジェクトポインタ
  /// @param cls        クラス情報
  /// @param cls_idx    クラスインデックス
  /// @param version    \ref AILIA_CLASSIFIER_CLASS_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ailiaClassifierCompute() を一度も実行していない場合は \ref AILIA_STATUS_INVALID_STATE が返ります。
  /// 識別結果は推定確率順でソートされます。
  ///
  /// \~english
  /// @brief Gets the classification results.
  /// @param classifier A classifier instance pointer
  /// @param cls        Class information
  /// @param cls_idx    Class index
  /// @param version    \ref AILIA_CLASSIFIER_CLASS_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// If  ailiaClassifierCompute()  is not run at all, the function returns  \ref AILIA_STATUS_INVALID_STATE .
  /// The classification results are sorted in the order of estimated probability.
  int ailiaClassifierGetClass(
    ffi.Pointer<AILIAClassifier> classifier,
    ffi.Pointer<AILIAClassifierClass> obj,
    int cls_idx,
    int version,
  ) {
    return _ailiaClassifierGetClass(
      classifier,
      obj,
      cls_idx,
      version,
    );
  }

  late final _ailiaClassifierGetClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIAClassifier>,
              ffi.Pointer<AILIAClassifierClass>,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaClassifierGetClass');
  late final _ailiaClassifierGetClass = _ailiaClassifierGetClassPtr.asFunction<
      int Function(ffi.Pointer<AILIAClassifier>,
          ffi.Pointer<AILIAClassifierClass>, int, int)>();

  /// \~japanese
  /// @brief 検出オブジェクトを作成します。
  /// @param detector       検出オブジェクトポインタ
  /// @param net            ネットワークオブジェクトポインタ
  /// @param format         ネットワークの画像フォーマット (AILIA_NETWORK_IMAGE_FORMAT_*)
  /// @param channel        ネットワークの画像チャンネル (AILIA_NETWORK_IMAGE_CHANNEL_*)
  /// @param range          ネットワークの画像レンジ (AILIA_NETWORK_IMAGE_RANGE_*)
  /// @param algorithm      検出アルゴリズム(AILIA_DETECTOR_ALGORITHM_*)
  /// @param category_count 検出カテゴリ数(VOCの場合は20、COCOの場合は80、などを指定)
  /// @param flags          追加オプションフラグ(AILIA_DETECTOR_FLAG_*)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Creates a detector instance.
  /// @param detector       A detector instance pointer
  /// @param net            The network instance pointer
  /// @param format         The network image format (AILIA_NETWORK_IMAGE_FORMAT_*)
  /// @param channel        The network image channel (AILIA_NETWORK_IMAGE_CHANNEL_*)
  /// @param range          The network image range (AILIA_NETWORK_IMAGE_RANGE_*)
  /// @param algorithm      Detection algorithm(AILIA_DETECTOR_ALGORITHM_*)
  /// @param category_count The number of detection categories (specify 20 for VOC or 80 for COCO, etc.)
  /// @param flags          Additional option(AILIA_DETECTOR_FLAG_*)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaCreateDetector(
    ffi.Pointer<ffi.Pointer<AILIADetector>> detector,
    ffi.Pointer<AILIANetwork> net,
    int format,
    int channel,
    int range,
    int algorithm,
    int category_count,
    int flags,
  ) {
    return _ailiaCreateDetector(
      detector,
      net,
      format,
      channel,
      range,
      algorithm,
      category_count,
      flags,
    );
  }

  late final _ailiaCreateDetectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<AILIADetector>>,
              ffi.Pointer<AILIANetwork>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaCreateDetector');
  late final _ailiaCreateDetector = _ailiaCreateDetectorPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<AILIADetector>>,
          ffi.Pointer<AILIANetwork>, int, int, int, int, int, int)>();

  /// \~japanese
  /// @brief 検出オブジェクトを破棄します。
  /// @param detector 検出オブジェクトポインタ
  ///
  /// \~english
  /// @brief Destroys the detector instance.
  /// @param detector A detector instance pointer
  void ailiaDestroyDetector(
    ffi.Pointer<AILIADetector> detector,
  ) {
    return _ailiaDestroyDetector(
      detector,
    );
  }

  late final _ailiaDestroyDetectorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AILIADetector>)>>(
      'ailiaDestroyDetector');
  late final _ailiaDestroyDetector = _ailiaDestroyDetectorPtr
      .asFunction<void Function(ffi.Pointer<AILIADetector>)>();

  /// \~japanese
  /// @brief 物体検出を行います。
  /// @param detector                    検出オブジェクトポインタ
  /// @param src                         画像データ(32bpp)
  /// @param src_stride                  1ラインのバイト数
  /// @param src_width                   画像幅
  /// @param src_height                  画像高さ
  /// @param src_format                  画像フォーマット (AILIA_IMAGE_FORMAT_*)
  /// @param threshold                   検出しきい値(0.1f等)(小さいほど検出されやすくなり、検出数増加)
  /// @param iou                         重複除外しきい値(0.45f等)(小さいほど重複を許容せず検出数減少)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Performs object detection.
  /// @param detector                    A detector instance pointer
  /// @param src                         Image data (32 bpp)
  /// @param src_stride                  The number of bytes in 1 line
  /// @param src_width                   Image width
  /// @param src_height                  Image height
  /// @param src_format                  Image format (AILIA_IMAGE_FORMAT_*)
  /// @param threshold                   The detection threshold (for example, 0.1f) (The smaller it is, the easier the
  /// detection will be and the more detected objects found.)
  /// @param iou                         Iou threshold (for example, 0.45f) (The smaller it is, the fewer detected objects
  /// found, as duplication is not allowed.)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaDetectorCompute(
    ffi.Pointer<AILIADetector> detector,
    ffi.Pointer<ffi.Void> src,
    int src_stride,
    int src_width,
    int src_height,
    int src_format,
    double threshold,
    double iou,
  ) {
    return _ailiaDetectorCompute(
      detector,
      src,
      src_stride,
      src_width,
      src_height,
      src_format,
      threshold,
      iou,
    );
  }

  late final _ailiaDetectorComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIADetector>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Float,
              ffi.Float)>>('ailiaDetectorCompute');
  late final _ailiaDetectorCompute = _ailiaDetectorComputePtr.asFunction<
      int Function(ffi.Pointer<AILIADetector>, ffi.Pointer<ffi.Void>, int, int,
          int, int, double, double)>();

  /// \~japanese
  /// @brief 検出結果の数を取得します。
  /// @param detector   検出オブジェクトポインタ
  /// @param obj_count  オブジェクト数
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the number of detection results.
  /// @param detector   A detector instance pointer
  /// @param obj_count  The number of objects
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaDetectorGetObjectCount(
    ffi.Pointer<AILIADetector> detector,
    ffi.Pointer<ffi.Uint32> obj_count,
  ) {
    return _ailiaDetectorGetObjectCount(
      detector,
      obj_count,
    );
  }

  late final _ailiaDetectorGetObjectCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIADetector>,
              ffi.Pointer<ffi.Uint32>)>>('ailiaDetectorGetObjectCount');
  late final _ailiaDetectorGetObjectCount =
      _ailiaDetectorGetObjectCountPtr.asFunction<
          int Function(ffi.Pointer<AILIADetector>, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 検出結果を取得します。
  /// @param detector   検出オブジェクトポインタ
  /// @param obj        オブジェクト情報
  /// @param obj_idx    オブジェクトインデックス
  /// @param version    AILIA_DETECTOR_OBJECT_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ailiaDetectorCompute() を一度も実行していない場合は \ref AILIA_STATUS_INVALID_STATE が返ります。
  /// 検出結果は推定確率順でソートされます。
  ///
  /// \~english
  /// @brief Gets the detection results.
  /// @param detector   A detector instance pointer
  /// @param obj        Object information
  /// @param obj_idx    Object index
  /// @param version    AILIA_DETECTOR_OBJECT_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// If  ailiaDetectorCompute()  is not run at all, the function returns  \ref AILIA_STATUS_INVALID_STATE .
  /// The detection results are sorted in the order of estimated probability.
  int ailiaDetectorGetObject(
    ffi.Pointer<AILIADetector> detector,
    ffi.Pointer<AILIADetectorObject> obj,
    int obj_idx,
    int version,
  ) {
    return _ailiaDetectorGetObject(
      detector,
      obj,
      obj_idx,
      version,
    );
  }

  late final _ailiaDetectorGetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIADetector>,
              ffi.Pointer<AILIADetectorObject>,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaDetectorGetObject');
  late final _ailiaDetectorGetObject = _ailiaDetectorGetObjectPtr.asFunction<
      int Function(ffi.Pointer<AILIADetector>, ffi.Pointer<AILIADetectorObject>,
          int, int)>();

  /// \~japanese
  /// @brief YoloV2などのためにアンカーズ (anchorsまたはbiases) の情報を設定します。
  /// @param detector       検出オブジェクトポインタ
  /// @param anchors        アンカーズの寸法 (検出ボックスの形状、高さと幅)
  /// @param anchors_count  アンカーズの数 (anchorsの配列サイズの半分)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// YoloV2などは学習時に決定された複数の検出ボックスを使用して物体検出を行います。このAPIで学習時に決定された検出ボックスの形状を設定することで、正しい推論を行います。
  /// anchorsには{x,y,x,y...}の形式で格納します。
  /// anchors_countが5の場合、anchorsは10次元の配列になります。
  ///
  /// \~english
  /// @brief Sets the anchor information (anchors or biases) for YoloV2 or other systems.
  /// @param detector       A detector instance pointer
  /// @param anchors        The anchor dimensions (the shape, height and width of the detection box)
  /// @param anchors_count  The number of anchors (half of the anchors array size)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// YoloV2 and other systems perform object detection with multiple detection boxes determined during training. By
  /// using this API function to set the shape of the detection box determined during training, correct inferences can be
  /// made. The {x, y, x, y ...} format is used for anchor storage. If anchors_count has a value of 5, then anchors is a
  /// 10-dimensional array.
  int ailiaDetectorSetAnchors(
    ffi.Pointer<AILIADetector> detector,
    ffi.Pointer<ffi.Float> anchors,
    int anchors_count,
  ) {
    return _ailiaDetectorSetAnchors(
      detector,
      anchors,
      anchors_count,
    );
  }

  late final _ailiaDetectorSetAnchorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIADetector>, ffi.Pointer<ffi.Float>,
              ffi.Uint32)>>('ailiaDetectorSetAnchors');
  late final _ailiaDetectorSetAnchors = _ailiaDetectorSetAnchorsPtr.asFunction<
      int Function(ffi.Pointer<AILIADetector>, ffi.Pointer<ffi.Float>, int)>();

  /// \~japanese
  /// @brief YoloV3またはYoloXでのモデルへの入力画像サイズを指定します。
  /// @param detector       検出オブジェクトポインタ
  /// @param input_width    モデルの入力画像幅
  /// @param input_height   モデルの入力画像高さ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// YoloV3では単一のモデルが任意の入力解像度に対応します。(32 の倍数制限あり)
  /// YoloXでは単一のモデルが任意の入力解像度に対応します。
  /// 計算量の削減等でモデルへの入力画像サイズを指定する場合この API を実行してください。
  /// ailiaCreateDetector() () と  ailiaDetectorCompute() () の間に実行する必要があります。
  /// この API を実行しない場合、デフォルトの 416x416 を利用します。
  /// YOLOv3またはYOLOX 以外で実行した場合、 \ref AILIA_STATUS_INVALID_STATE  を返します。
  ///
  /// \~english
  /// @brief Sets the size of the input image for YoloV3 or YoloX model.
  /// @param detector       A detector instance pointer
  /// @param input_width    Width of the model's input image
  /// @param input_height   Height of the model's input image
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// The same YoloV3 model can be used for any input image size that is a multiple of 32.
  /// The same YoloX model can be used for any input image size.
  /// You can use this API if you want to choose the input image size, for example to reduce the calculation complexity.
  /// It must be called between  ailiaCreateDetector() () and  ailiaDetectorCompute() ().
  /// If this API is not used, a default size of 416x416 is assumed.
  /// If used with some model other than YoloV3 or YoloX, it will return the error status  \ref
  /// AILIA_STATUS_INVALID_STATE .
  int ailiaDetectorSetInputShape(
    ffi.Pointer<AILIADetector> detector,
    int input_width,
    int input_height,
  ) {
    return _ailiaDetectorSetInputShape(
      detector,
      input_width,
      input_height,
    );
  }

  late final _ailiaDetectorSetInputShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIADetector>, ffi.Uint32,
              ffi.Uint32)>>('ailiaDetectorSetInputShape');
  late final _ailiaDetectorSetInputShape = _ailiaDetectorSetInputShapePtr
      .asFunction<int Function(ffi.Pointer<AILIADetector>, int, int)>();

  /// \~japanese
  /// @brief 特徴抽出オブジェクトを作成します。
  /// @param fextractor 特徴抽出オブジェクトポインタ
  /// @param net        ネットワークオブジェクトポインタ
  /// @param format     ネットワークの画像フォーマット (AILIA_NETWORK_IMAGE_FORMAT_*)
  /// @param channel    ネットワークの画像チャンネル (AILIA_NETWORK_IMAGE_CHANNEL_*)
  /// @param range      ネットワークの画像レンジ (AILIA_NETWORK_IMAGE_RANGE_*)
  /// @param layer_name 特徴に対応したレイヤーの名称 (VGG16の場合はfc1, NULLで最終レイヤー)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Creates a feature extraction instance.
  /// @param fextractor A feature extraction instance pointer
  /// @param net        A network instance pointer
  /// @param format     The network image format (AILIA_NETWORK_IMAGE_FORMAT_*)
  /// @param channel    The network image channel (AILIA_NETWORK_IMAGE_CHANNEL_*)
  /// @param range      The network image range (AILIA_NETWORK_IMAGE_RANGE_*)
  /// @param layer_name The name of the layer corresponding to the feature (fc1 for VGG16 and NULL for the last layer)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaCreateFeatureExtractor(
    ffi.Pointer<ffi.Pointer<AILIAFeatureExtractor>> fextractor,
    ffi.Pointer<AILIANetwork> net,
    int format,
    int channel,
    int range,
    ffi.Pointer<ffi.Int8> layer_name,
  ) {
    return _ailiaCreateFeatureExtractor(
      fextractor,
      net,
      format,
      channel,
      range,
      layer_name,
    );
  }

  late final _ailiaCreateFeatureExtractorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<AILIAFeatureExtractor>>,
              ffi.Pointer<AILIANetwork>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('ailiaCreateFeatureExtractor');
  late final _ailiaCreateFeatureExtractor =
      _ailiaCreateFeatureExtractorPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<AILIAFeatureExtractor>>,
              ffi.Pointer<AILIANetwork>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Int8>)>();

  /// \~japanese
  /// @brief 特徴抽出オブジェクトを破棄します。
  /// @param fextractor 特徴抽出オブジェクトポインタ
  ///
  /// \~english
  /// @brief It destroys the feature extraction instance.
  /// @param fextractor A feature extraction instance pointer
  void ailiaDestroyFeatureExtractor(
    ffi.Pointer<AILIAFeatureExtractor> fextractor,
  ) {
    return _ailiaDestroyFeatureExtractor(
      fextractor,
    );
  }

  late final _ailiaDestroyFeatureExtractorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<AILIAFeatureExtractor>)>>(
      'ailiaDestroyFeatureExtractor');
  late final _ailiaDestroyFeatureExtractor = _ailiaDestroyFeatureExtractorPtr
      .asFunction<void Function(ffi.Pointer<AILIAFeatureExtractor>)>();

  /// \~japanese
  /// @brief 特徴の抽出を行います。
  /// @param fextractor                  特徴抽出オブジェクトポインタ
  /// @param dst                         特徴の格納先ポインタ(numeric型)
  /// @param dst_size                    dstのサイズ(byte)
  /// @param src                         画像データ(32bpp)
  /// @param src_stride                  1ラインのバイト数
  /// @param src_width                   画像幅
  /// @param src_height                  画像高さ
  /// @param src_format                  画像フォーマット (AILIA_IMAGE_FORMAT_*)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Performs feature extraction.
  /// @param fextractor                  A feature extraction instance pointer
  /// @param dst                         A pointer to the storage location of the feature (numeric type)
  /// @param dst_size                    The size of the dst (bytes)
  /// @param src                         Image data (32 bpp)
  /// @param src_stride                  The number of bytes in 1 line
  /// @param src_width                   Image width
  /// @param src_height                  Image height
  /// @param src_format                  Image format (AILIA_IMAGE_FORMAT_*)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaFeatureExtractorCompute(
    ffi.Pointer<AILIAFeatureExtractor> fextractor,
    ffi.Pointer<ffi.Void> dst,
    int dst_size,
    ffi.Pointer<ffi.Void> src,
    int src_stride,
    int src_width,
    int src_height,
    int src_format,
  ) {
    return _ailiaFeatureExtractorCompute(
      fextractor,
      dst,
      dst_size,
      src,
      src_stride,
      src_width,
      src_height,
      src_format,
    );
  }

  late final _ailiaFeatureExtractorComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIAFeatureExtractor>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaFeatureExtractorCompute');
  late final _ailiaFeatureExtractorCompute =
      _ailiaFeatureExtractorComputePtr.asFunction<
          int Function(
              ffi.Pointer<AILIAFeatureExtractor>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int)>();

  /// \~japanese
  /// @brief 特徴間の距離を計算します。
  /// @param fextractor                  特徴抽出オブジェクトポインタ
  /// @param distance                    特徴間距離
  /// @param distance_type               特徴間距離の種別
  /// @param feature1                    一方の特徴の格納先ポインタ(numeric型)
  /// @param feature1_size               dstのサイズ(byte)
  /// @param feature2                    他方の特徴の格納先ポインタ(numeric型)
  /// @param feature2_size               dstのサイズ(byte)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Computes distances in feature space.
  /// @param fextractor                  A feature extraction instance pointer
  /// @param distance                    A distance in feature space
  /// @param distance_type               The type of the distance in feature space
  /// @param feature1                    A pointer to the storage location of one feature (numeric type)
  /// @param feature1_size               The size of the feature1 (bytes)
  /// @param feature2                    A pointer to the storage location of the other feature (numeric type)
  /// @param feature2_size               The size of the feature2 (bytes)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaFeatureExtractorMatch(
    ffi.Pointer<AILIAFeatureExtractor> fextractor,
    ffi.Pointer<ffi.Float> distance,
    int distace_type,
    ffi.Pointer<ffi.Void> feature1,
    int feature1_size,
    ffi.Pointer<ffi.Void> feature2,
    int feature2_size,
  ) {
    return _ailiaFeatureExtractorMatch(
      fextractor,
      distance,
      distace_type,
      feature1,
      feature1_size,
      feature2,
      feature2_size,
    );
  }

  late final _ailiaFeatureExtractorMatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIAFeatureExtractor>,
              ffi.Pointer<ffi.Float>,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32)>>('ailiaFeatureExtractorMatch');
  late final _ailiaFeatureExtractorMatch =
      _ailiaFeatureExtractorMatchPtr.asFunction<
          int Function(
              ffi.Pointer<AILIAFeatureExtractor>,
              ffi.Pointer<ffi.Float>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// \~japanese
  /// @brief 検出オブジェクトを作成します。
  /// @param pose_estimator 検出オブジェクトポインタ
  /// @param net            ネットワークオブジェクトポインタ
  /// @param algorithm      検出アルゴリズム (AILIA_POSE_ESTIMATOR_ALGORITHM_*)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// caffemodelとprototxtを読み込んだAILIANetworkから検出オブジェクトを作成します。
  ///
  /// \~english
  /// @brief Creates a estimator instance.
  /// @param pose_estimator An estimator instance pointer
  /// @param net            The network instance pointer
  /// @param algorithm      Estimation algorithm(AILIA_POSE_ESTIMATOR_ALGORITHM_*)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function creates an estimator instance from AILIANetwork when reading caffemodel and prototxt.
  int ailiaCreatePoseEstimator(
    ffi.Pointer<ffi.Pointer<AILIAPoseEstimator>> pose_estimator,
    ffi.Pointer<AILIANetwork> net,
    int algorithm,
  ) {
    return _ailiaCreatePoseEstimator(
      pose_estimator,
      net,
      algorithm,
    );
  }

  late final _ailiaCreatePoseEstimatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<AILIAPoseEstimator>>,
              ffi.Pointer<AILIANetwork>,
              ffi.Uint32)>>('ailiaCreatePoseEstimator');
  late final _ailiaCreatePoseEstimator =
      _ailiaCreatePoseEstimatorPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<AILIAPoseEstimator>>,
              ffi.Pointer<AILIANetwork>, int)>();

  /// \~japanese
  /// @brief 検出オブジェクトを破棄します。
  /// @param pose_estimator 検出オブジェクトポインタ
  ///
  /// \~english
  /// @brief Destroys the estimator instance.
  /// @param pose_estimator An estimator instance pointer
  void ailiaDestroyPoseEstimator(
    ffi.Pointer<AILIAPoseEstimator> pose_estimator,
  ) {
    return _ailiaDestroyPoseEstimator(
      pose_estimator,
    );
  }

  late final _ailiaDestroyPoseEstimatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AILIAPoseEstimator>)>>('ailiaDestroyPoseEstimator');
  late final _ailiaDestroyPoseEstimator = _ailiaDestroyPoseEstimatorPtr
      .asFunction<void Function(ffi.Pointer<AILIAPoseEstimator>)>();

  /// \~japanese
  /// @brief 検出閾値を設定します。
  /// @param pose_estimator              検出オブジェクトポインタ
  /// @param threshold                   検出閾値 0.0以上1.0以下の値で、値が小さいほど検出しやすくなります。
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Set the detection threshold.
  /// @param pose_estimator              An estimator instance pointer
  /// @param threshold                   The detection threshold (for example, 0.1f) (The smaller it is, the easier the
  /// detection will be and the more detected objects found.)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaPoseEstimatorSetThreshold(
    ffi.Pointer<AILIAPoseEstimator> pose_estimator,
    double threshold,
  ) {
    return _ailiaPoseEstimatorSetThreshold(
      pose_estimator,
      threshold,
    );
  }

  late final _ailiaPoseEstimatorSetThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIAPoseEstimator>,
              ffi.Float)>>('ailiaPoseEstimatorSetThreshold');
  late final _ailiaPoseEstimatorSetThreshold =
      _ailiaPoseEstimatorSetThresholdPtr
          .asFunction<int Function(ffi.Pointer<AILIAPoseEstimator>, double)>();

  /// \~japanese
  /// @brief 骨格検出・顔特徴点検出を行います。
  /// @param pose_estimator              検出オブジェクトポインタ
  /// @param src                         画像データ(32bpp)
  /// @param src_stride                  1ラインのバイト数
  /// @param src_width                   画像幅
  /// @param src_height                  画像高さ
  /// @param src_format                  画像形式 (AILIA_IMAGE_FORMAT_*)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Performs human pose estimation and human face landmarks extraction.
  /// @param pose_estimator              An estimator instance pointer
  /// @param src                         Image data (32 bpp)
  /// @param src_stride                  The number of bytes in 1 line
  /// @param src_width                   Image width
  /// @param src_height                  Image height
  /// @param src_format                  Image format (AILIA_IMAGE_FORMAT_*)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaPoseEstimatorCompute(
    ffi.Pointer<AILIAPoseEstimator> pose_estimator,
    ffi.Pointer<ffi.Void> src,
    int src_stride,
    int src_width,
    int src_height,
    int src_format,
  ) {
    return _ailiaPoseEstimatorCompute(
      pose_estimator,
      src,
      src_stride,
      src_width,
      src_height,
      src_format,
    );
  }

  late final _ailiaPoseEstimatorComputePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<ffi.Void>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaPoseEstimatorCompute');
  late final _ailiaPoseEstimatorCompute =
      _ailiaPoseEstimatorComputePtr.asFunction<
          int Function(ffi.Pointer<AILIAPoseEstimator>, ffi.Pointer<ffi.Void>,
              int, int, int, int)>();

  /// \~japanese
  /// @brief 検出結果の数を取得します。
  /// @param pose_estimator  検出オブジェクトポインタ
  /// @param obj_count       オブジェクト数  顔特徴点の場合は1または0となります。
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the number of detection results.
  /// @param pose_estimator  An estimator instance pointer
  /// @param obj_count       The number of objects. Set to 1 or 0 for human face landmarks.
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaPoseEstimatorGetObjectCount(
    ffi.Pointer<AILIAPoseEstimator> pose_estimator,
    ffi.Pointer<ffi.Uint32> obj_count,
  ) {
    return _ailiaPoseEstimatorGetObjectCount(
      pose_estimator,
      obj_count,
    );
  }

  late final _ailiaPoseEstimatorGetObjectCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<ffi.Uint32>)>>('ailiaPoseEstimatorGetObjectCount');
  late final _ailiaPoseEstimatorGetObjectCount =
      _ailiaPoseEstimatorGetObjectCountPtr.asFunction<
          int Function(
              ffi.Pointer<AILIAPoseEstimator>, ffi.Pointer<ffi.Uint32>)>();

  /// \~japanese
  /// @brief 骨格検出結果を取得します。
  /// @param pose_estimator  検出オブジェクトポインタ
  /// @param obj             オブジェクト情報
  /// @param obj_idx         オブジェクトインデックス
  /// @param version         AILIA_POSE_ESTIMATOR_OBJECT_POSE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the results of the human pose estimation.
  /// @param pose_estimator  An estimator instance pointer
  /// @param obj             Object information
  /// @param obj_idx         Object index
  /// @param version         AILIA_POSE_ESTIMATOR_OBJECT_POSE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaPoseEstimatorGetObjectPose(
    ffi.Pointer<AILIAPoseEstimator> pose_estimator,
    ffi.Pointer<AILIAPoseEstimatorObjectPose> obj,
    int obj_idx,
    int version,
  ) {
    return _ailiaPoseEstimatorGetObjectPose(
      pose_estimator,
      obj,
      obj_idx,
      version,
    );
  }

  late final _ailiaPoseEstimatorGetObjectPosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<AILIAPoseEstimatorObjectPose>,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaPoseEstimatorGetObjectPose');
  late final _ailiaPoseEstimatorGetObjectPose =
      _ailiaPoseEstimatorGetObjectPosePtr.asFunction<
          int Function(ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<AILIAPoseEstimatorObjectPose>, int, int)>();

  /// \~japanese
  /// @brief 顔特徴点検出結果を取得します。
  /// @param pose_estimator  検出オブジェクトポインタ
  /// @param obj             オブジェクト情報
  /// @param obj_idx         オブジェクトインデックス 必ず 0 を指定してください。
  /// @param version         AILIA_POSE_ESTIMATOR_OBJECT_FACE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the results of the human face landmarks extraction.
  /// @param pose_estimator  An estimator instance pointer
  /// @param obj             Object information
  /// @param obj_idx         Object index. Ensure that 0 is specified.
  /// @param version         AILIA_POSE_ESTIMATOR_OBJECT_FACE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaPoseEstimatorGetObjectFace(
    ffi.Pointer<AILIAPoseEstimator> pose_estimator,
    ffi.Pointer<AILIAPoseEstimatorObjectFace> obj,
    int obj_idx,
    int version,
  ) {
    return _ailiaPoseEstimatorGetObjectFace(
      pose_estimator,
      obj,
      obj_idx,
      version,
    );
  }

  late final _ailiaPoseEstimatorGetObjectFacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<AILIAPoseEstimatorObjectFace>,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaPoseEstimatorGetObjectFace');
  late final _ailiaPoseEstimatorGetObjectFace =
      _ailiaPoseEstimatorGetObjectFacePtr.asFunction<
          int Function(ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<AILIAPoseEstimatorObjectFace>, int, int)>();

  /// \~japanese
  /// @brief UpPose 認識結果を取得します。
  /// @param pose_estimator  検出オブジェクトポインタ
  /// @param obj             オブジェクト情報
  /// @param obj_idx         オブジェクトインデックス
  /// @param version         AILIA_POSE_ESTIMATOR_OBJECT_POSE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the results of the human up pose estimation.
  /// @param pose_estimator  An estimator instance pointer
  /// @param obj             Object information
  /// @param obj_idx         Object index
  /// @param version         AILIA_POSE_ESTIMATOR_OBJECT_UPPOSE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaPoseEstimatorGetObjectUpPose(
    ffi.Pointer<AILIAPoseEstimator> pose_estimator,
    ffi.Pointer<AILIAPoseEstimatorObjectUpPose> obj,
    int obj_idx,
    int version,
  ) {
    return _ailiaPoseEstimatorGetObjectUpPose(
      pose_estimator,
      obj,
      obj_idx,
      version,
    );
  }

  late final _ailiaPoseEstimatorGetObjectUpPosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<AILIAPoseEstimatorObjectUpPose>,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaPoseEstimatorGetObjectUpPose');
  late final _ailiaPoseEstimatorGetObjectUpPose =
      _ailiaPoseEstimatorGetObjectUpPosePtr.asFunction<
          int Function(ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<AILIAPoseEstimatorObjectUpPose>, int, int)>();

  /// \~japanese
  /// @brief Hand 認識結果を取得します。
  /// @param pose_estimator  検出オブジェクトポインタ
  /// @param obj             オブジェクト情報
  /// @param obj_idx         オブジェクトインデックス 必ず 0 を指定してください。
  /// @param version         AILIA_POSE_ESTIMATOR_OBJECT_HAND_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the results of the human hand estimation.
  /// @param pose_estimator  An estimator instance pointer
  /// @param obj             Object information
  /// @param obj_idx         Object index. Ensure that 0 is specified.
  /// @param version         AILIA_POSE_ESTIMATOR_OBJECT_HAND_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaPoseEstimatorGetObjectHand(
    ffi.Pointer<AILIAPoseEstimator> pose_estimator,
    ffi.Pointer<AILIAPoseEstimatorObjectHand> obj,
    int obj_idx,
    int version,
  ) {
    return _ailiaPoseEstimatorGetObjectHand(
      pose_estimator,
      obj,
      obj_idx,
      version,
    );
  }

  late final _ailiaPoseEstimatorGetObjectHandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<AILIAPoseEstimatorObjectHand>,
              ffi.Uint32,
              ffi.Uint32)>>('ailiaPoseEstimatorGetObjectHand');
  late final _ailiaPoseEstimatorGetObjectHand =
      _ailiaPoseEstimatorGetObjectHandPtr.asFunction<
          int Function(ffi.Pointer<AILIAPoseEstimator>,
              ffi.Pointer<AILIAPoseEstimatorObjectHand>, int, int)>();
}

final class _ailiaFileCallback extends ffi.Struct {
  external AILIA_USER_API_FOPEN fopen;

  external AILIA_USER_API_FSEEK fseek;

  external AILIA_USER_API_FTELL ftell;

  external AILIA_USER_API_FREAD fread;

  external AILIA_USER_API_FSIZE fsize;

  external AILIA_USER_API_FCLOSE fclose;
}

/// \~japanese
/// @brief ファイルを開きます
/// @param const void *   ailiaOpenStreamEx() もしくは ailiaOpenWeightEx() に与えたfopen_args
/// @return
/// 成功した場合、ユーザ定義ファイルポインタを返す。
/// 失敗した場合、NULLを返す。
///
/// \~english
/// @brief Opens a file.
/// @param const void *  fopen_args given to  ailiaOpenStreamEx()  or ailiaOpenWeightEx
/// @return
/// This function returns a user-defined file pointer if successful.
/// It returns NULL if it fails.
typedef AILIA_USER_API_FOPEN = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;

/// \~japanese
/// @brief ファイルをシークします
/// @param void *                     ユーザ定義ファイルポインタ
/// @param  \ref AILIA_FSIZE_RETURN_TYPE     ファイル先頭からのオフセットバイト
/// @return
/// 成功した場合、 \ref AILIA_USER_API_SUCCESS を返す。
/// 失敗した場合、 \ref AILIA_USER_API_FAILED を返す。
///
/// \~english
/// @brief It seeks the file specified.
/// @param void *                     A user-defined file pointer
/// @param  \ref AILIA_FSIZE_RETURN_TYPE     Offset in bytes from the beginning of the file
/// @return
/// This function returns  \ref AILIA_USER_API_SUCCESS  if successful.
/// It returns  \ref AILIA_USER_API_FAILED  if it fails.
typedef AILIA_USER_API_FSEEK = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int64)>>;

/// \~japanese
/// @brief ファイルの現在位置を取得します
/// @param void * ユーザ定義ファイルポインタ
/// @return
/// 成功した場合、ファイルポインタの位置をバイト単位で返す。
/// 失敗した場合、-1を返す。
///
/// \~english
/// @brief Gets the current position in the file.
/// @param void * A user-defined file pointer
/// @return
/// This function returns the position, in bytes, the file pointer points to if successful.
/// It returns -1 if it fails.
typedef AILIA_USER_API_FTELL = ffi
    .Pointer<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>;

/// \~japanese
/// @brief ファイルからデータを読み込みます
/// @param void *                     読み込みデータ格納先のポインタ
/// @param  \ref AILIA_FSIZE_RETURN_TYPE     読み込みデータのバイト長さ
/// @param void *                     ユーザ定義ファイルポインタ
/// @return
/// 成功した場合、 \ref AILIA_USER_API_SUCCESS を返す。
/// 失敗した場合、 \ref AILIA_USER_API_FAILED を返す。
/// 標準APIとは異なり、返値はAILIA_USER_API_*になりますのでご注意ください。
///
/// \~english
/// @brief Reads data from the file.
/// @param void *                     A pointer to the storage location of the data to be read
/// @param  \ref AILIA_FSIZE_RETURN_TYPE     The length in bytes of the data to be read
/// @param void *                     A user-defined file pointer
/// @return
/// This function returns  \ref AILIA_USER_API_SUCCESS  if successful.
/// It returns  \ref AILIA_USER_API_FAILED  if it fails.
/// Note that unlike the standard API, the return value will be AILIA_USER_API_*.
typedef AILIA_USER_API_FREAD = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Pointer<ffi.Void>)>>;

/// \~japanese
/// @brief ファイルのサイズを取得します
/// @param void * ユーザ定義ファイルポインタ
/// @return
/// 成功した場合、ファイルのサイズをバイト単位で返す。
/// 失敗した場合、-1を返す。
///
/// \~english
/// @brief Gets the size of the file.
/// @param void * A user-defined file pointer
/// @return
/// This function returns the size of the file in bytes if successful.
/// It returns -1 if it fails.
typedef AILIA_USER_API_FSIZE = ffi
    .Pointer<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Void>)>>;

/// \~japanese
/// @brief ファイルを閉じます
/// @param void *  ユーザ定義ファイルポインタ
/// @return
/// 成功した場合、 \ref AILIA_USER_API_SUCCESS を返す。
/// 失敗した場合、 \ref AILIA_USER_API_FAILED を返す。
///
/// \~english
/// @brief Closes the file.
/// @param void *  A user-defined file pointer
/// @return
/// This function returns  \ref AILIA_USER_API_SUCCESS  if successful.
/// It returns  \ref AILIA_USER_API_FAILED  if it fails.
typedef AILIA_USER_API_FCLOSE = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>;

/// ネットワークオブジェクトのインスタンス
final class AILIANetwork extends ffi.Opaque {}

final class _AILIAShape extends ffi.Struct {
  /// \~japanese
  /// X軸のサイズ
  ///
  /// \~english
  /// Size along the X axis
  @ffi.Uint32()
  external int x;

  /// \~japanese
  /// Y軸のサイズ
  ///
  /// \~english
  /// Size along the Y axis
  @ffi.Uint32()
  external int y;

  /// \~japanese
  /// Z軸のサイズ
  ///
  /// \~english
  /// Size along the Z axis
  @ffi.Uint32()
  external int z;

  /// \~japanese
  /// W軸のサイズ
  ///
  /// \~english
  /// Size along the W axis
  @ffi.Uint32()
  external int w;

  /// \~japanese
  /// 次元情報
  ///
  /// \~english
  /// Dimension information
  @ffi.Uint32()
  external int dim;
}

typedef wchar_t = ffi.Int32;
typedef ailiaFileCallback = _ailiaFileCallback;
typedef AILIAShape = _AILIAShape;

final class _AILIAEnvironment extends ffi.Struct {
  /// \~japanese
  /// 環境を識別するID( ailiaCreate() の引数に与える)
  ///
  /// \~english
  /// The ID to identify the inference backend (passed to  ailiaCreate()  as an argument)
  @ffi.Int32()
  external int id;

  /// \~japanese
  /// 環境の種別( \ref AILIA_ENVIRONMENT_TYPE_CPU  or BLAS or GPU)
  ///
  /// \~english
  /// The type of the inference backend ( \ref AILIA_ENVIRONMENT_TYPE_CPU , BLAS, or GPU)
  @ffi.Int32()
  external int type;

  /// \~japanese
  /// デバイス名(シングルトンで保持されており開放不要)(ASCII)
  ///
  /// \~english
  /// The device name. It is valid until the AILIANetwork instance is destroyed.
  external ffi.Pointer<ffi.Int8> name;

  /// \~japanese
  /// 環境のバックエンド (AILIA_ENVIRONMENT_BACKEND_*)
  ///
  /// \~english
  /// Computational (hardware) backend enabled by this environment (AILIA_ENVIRONMENT_BACKEND_*)
  @ffi.Int32()
  external int backend;

  /// \~japanese
  /// 環境の特性などを示す(AILIA_ENVIRONMENT_PROPERTY_* の論理和)
  ///
  /// \~english
  /// Additional property (low-power etc) of the environment (Logical-OR of AILIA_ENVIRONMENT_PROPERTY_*)
  @ffi.Int32()
  external int props;
}

typedef AILIAEnvironment = _AILIAEnvironment;

/// 識別オブジェクトのインスタンス
final class AILIAClassifier extends ffi.Opaque {}

final class _AILIAClassifierClass extends ffi.Struct {
  /// \~japanese
  /// 識別カテゴリ番号
  ///
  /// \~english
  /// Classification category number
  @ffi.Int32()
  external int category;

  /// \~japanese
  /// 推定確率(0～1)
  ///
  /// \~english
  /// Estimated probability (0 to 1)
  @ffi.Float()
  external double prob;
}

typedef AILIAClassifierClass = _AILIAClassifierClass;

/// 検出オブジェクトのインスタンス
final class AILIADetector extends ffi.Opaque {}

final class _AILIADetectorObject extends ffi.Struct {
  /// \~japanese
  /// オブジェクトカテゴリ番号(0～category_count-1)
  ///
  /// \~english
  /// Object category number (0 to category_count-1)
  @ffi.Uint32()
  external int category;

  /// \~japanese
  /// 推定確率(0～1)
  ///
  /// \~english
  /// Estimated probability (0 to 1)
  @ffi.Float()
  external double prob;

  /// \~japanese
  /// 左上X位置(1で画像幅)
  ///
  /// \~english
  /// X position at the top left (1 for the image width)
  @ffi.Float()
  external double x;

  /// \~japanese
  /// 左上Y位置(1で画像高さ)
  ///
  /// \~english
  /// Y position at the top left (1 for the image height)
  @ffi.Float()
  external double y;

  /// \~japanese
  /// 幅(1で画像横幅、負数は取らない)
  ///
  /// \~english
  /// Width (1 for the width of the image, negative numbers not allowed)
  @ffi.Float()
  external double w;

  /// \~japanese
  /// 高さ(1で画像高さ、負数は取らない)
  ///
  /// \~english
  /// Height (1 for the height of the image, negative numbers not allowed)
  @ffi.Float()
  external double h;
}

typedef AILIADetectorObject = _AILIADetectorObject;

/// 特徴抽出オブジェクトのインスタンス
final class AILIAFeatureExtractor extends ffi.Opaque {}

/// 検出オブジェクトのインスタンス
final class AILIAPoseEstimator extends ffi.Opaque {}

final class _AILIAPoseEstimatorKeypoint extends ffi.Struct {
  /// \~japanese
  /// 入力画像内 X座標  (0.0 , 1.0)
  ///
  /// \~english
  /// Input image X coordinate (0.0, 1.0)
  @ffi.Float()
  external double x;

  /// \~japanese
  /// 入力画像内 Y座標  (0.0 , 1.0)
  ///
  /// \~english
  /// Input image Y coordinate (0.0, 1.0)
  @ffi.Float()
  external double y;

  /// \~japanese
  /// 骨格検出のみ有効。体中心を座標0とした時に推定されるローカルZ座標。単位(スケール)は x と同じです。
  ///
  /// \~english
  /// Valid only for human pose estimation. The local Z coordinate is estimated when the center of the body is defined
  /// as coordinate 0. The unit (scale) is the same as that for X.
  @ffi.Float()
  external double z_local;

  /// \~japanese
  /// この点の検出信頼度。値が0.0Fの場合、この点は未検出のため使用できません。
  ///
  /// \~english
  /// The confidence of this point. If the value is 0.0F, then this point is not available as it has not been detected
  /// yet.
  @ffi.Float()
  external double score;

  /// \~japanese
  /// 通常は0です。この点が未検出で、他の点から補間可能な場合、x,yの値を補間し、interpolated=1となります。
  ///
  /// \~english
  /// The default is 0. If this point has not been detected and can be interpolated by other points, the x and y values
  /// are then interpolated and the value of interpolated is set to 1.
  @ffi.Int32()
  external int interpolated;
}

final class _AILIAPoseEstimatorObjectPose extends ffi.Struct {
  @ffi.Array.multi([19])
  external ffi.Array<AILIAPoseEstimatorKeypoint> points;

  /// \~japanese
  /// このオブジェクトの検出信頼度
  ///
  /// \~english
  /// The confidence of this object
  @ffi.Float()
  external double total_score;

  /// \~japanese
  /// points[]の中で正常に検出された関節点の個数
  ///
  /// \~english
  /// The number of body joint positions properly detected in points[]
  @ffi.Int32()
  external int num_valid_points;

  /// \~japanese
  /// 時間方向に、このオブジェクトにユニークなIDです。1以上の正の値です。
  ///
  /// \~english
  /// A unique ID for this object in the time direction. An integer value of 1 or more.
  @ffi.Int32()
  external int id;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> angle;
}

typedef AILIAPoseEstimatorKeypoint = _AILIAPoseEstimatorKeypoint;

final class _AILIAPoseEstimatorObjectFace extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<AILIAPoseEstimatorKeypoint> points;

  /// \~japanese
  /// このオブジェクトの検出信頼度
  ///
  /// \~english
  /// The confidence of this object
  @ffi.Float()
  external double total_score;
}

final class _AILIAPoseEstimatorObjectUpPose extends ffi.Struct {
  @ffi.Array.multi([15])
  external ffi.Array<AILIAPoseEstimatorKeypoint> points;

  /// \~japanese
  /// このオブジェクトの検出信頼度
  ///
  /// \~english
  /// The confidence of this object
  @ffi.Float()
  external double total_score;

  /// \~japanese
  /// points[]の中で正常に検出された関節点の個数
  ///
  /// \~english
  /// The number of body joint positions properly detected in points[]
  @ffi.Int32()
  external int num_valid_points;

  /// \~japanese
  /// 時間方向に、このオブジェクトにユニークなIDです。1以上の正の値です。
  ///
  /// \~english
  /// A unique ID for this object in the time direction. An integer value of 1 or more.
  @ffi.Int32()
  external int id;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> angle;
}

final class _AILIAPoseEstimatorObjectHand extends ffi.Struct {
  @ffi.Array.multi([21])
  external ffi.Array<AILIAPoseEstimatorKeypoint> points;

  /// \~japanese
  /// このオブジェクトの検出信頼度
  ///
  /// \~english
  /// The confidence of this object
  @ffi.Float()
  external double total_score;
}

typedef AILIAPoseEstimatorObjectPose = _AILIAPoseEstimatorObjectPose;
typedef AILIAPoseEstimatorObjectFace = _AILIAPoseEstimatorObjectFace;
typedef AILIAPoseEstimatorObjectUpPose = _AILIAPoseEstimatorObjectUpPose;
typedef AILIAPoseEstimatorObjectHand = _AILIAPoseEstimatorObjectHand;

const int NULL = 0;

const int AILIA_USER_API_SUCCESS = 0;

const int AILIA_USER_API_FAILED = -1;

const int AILIA_FILE_CALLBACK_VERSION = 1;

const int AILIA_STATUS_SUCCESS = 0;

const int AILIA_STATUS_INVALID_ARGUMENT = -1;

const int AILIA_STATUS_ERROR_FILE_API = -2;

const int AILIA_STATUS_INVALID_VERSION = -3;

const int AILIA_STATUS_BROKEN = -4;

const int AILIA_STATUS_MEMORY_INSUFFICIENT = -5;

const int AILIA_STATUS_THREAD_ERROR = -6;

const int AILIA_STATUS_INVALID_STATE = -7;

const int AILIA_STATUS_UNSUPPORT_NET = -9;

const int AILIA_STATUS_INVALID_LAYER = -10;

const int AILIA_STATUS_INVALID_PARAMINFO = -11;

const int AILIA_STATUS_NOT_FOUND = -12;

const int AILIA_STATUS_GPU_UNSUPPORT_LAYER = -13;

const int AILIA_STATUS_GPU_ERROR = -14;

const int AILIA_STATUS_UNIMPLEMENTED = -15;

const int AILIA_STATUS_PERMISSION_DENIED = -16;

const int AILIA_STATUS_EXPIRED = -17;

const int AILIA_STATUS_UNSETTLED_SHAPE = -18;

const int AILIA_STATUS_DATA_HIDDEN = -19;

const int AILIA_STATUS_DATA_REMOVED = -19;

const int AILIA_STATUS_LICENSE_NOT_FOUND = -20;

const int AILIA_STATUS_LICENSE_BROKEN = -21;

const int AILIA_STATUS_LICENSE_EXPIRED = -22;

const int AILIA_STATUS_NDIMENSION_SHAPE = -23;

const int AILIA_STATUS_OTHER_ERROR = -128;

const int AILIA_SHAPE_VERSION = 1;

const int AILIA_MULTITHREAD_AUTO = 0;

const int AILIA_ENVIRONMENT_ID_AUTO = -1;

const int AILIA_DATATYPE_UNDEFINED = 0;

const int AILIA_DATATYPE_FLOAT = 1;

const int AILIA_DATATYPE_UINT8 = 2;

const int AILIA_DATATYPE_INT8 = 3;

const int AILIA_DATATYPE_UINT16 = 4;

const int AILIA_DATATYPE_INT16 = 5;

const int AILIA_DATATYPE_INT32 = 6;

const int AILIA_DATATYPE_INT64 = 7;

const int AILIA_DATATYPE_BOOL = 9;

const int AILIA_DATATYPE_FLOAT16 = 10;

const int AILIA_DATATYPE_DOUBLE = 11;

const int AILIA_DATATYPE_UINT32 = 12;

const int AILIA_DATATYPE_UINT64 = 13;

const int AILIA_DATATYPE_BFLOAT16 = 16;

const int AILIA_ENVIRONMENT_VERSION = 2;

const int AILIA_ENVIRONMENT_TYPE_CPU = 0;

const int AILIA_ENVIRONMENT_TYPE_BLAS = 1;

const int AILIA_ENVIRONMENT_TYPE_GPU = 2;

const int AILIA_ENVIRONMENT_TYPE_REMOTE = 3;

const int AILIA_ENVIRONMENT_BACKEND_NONE = 0;

const int AILIA_ENVIRONMENT_BACKEND_CUDA = 2;

const int AILIA_ENVIRONMENT_BACKEND_MPS = 3;

const int AILIA_ENVIRONMENT_BACKEND_VULKAN = 6;

const int AILIA_ENVIRONMENT_PROPERTY_NORMAL = 0;

const int AILIA_ENVIRONMENT_PROPERTY_LOWPOWER = 1;

const int AILIA_ENVIRONMENT_PROPERTY_FP16 = 2;

const int AILIA_MEMORY_NO_OPTIMIZATION = 0;

const int AILIA_MEMORY_REDUCE_CONSTANT = 1;

const int AILIA_MEMORY_REDUCE_CONSTANT_WITH_INPUT_INITIALIZER = 2;

const int AILIA_MEMORY_REDUCE_INTERSTAGE = 4;

const int AILIA_MEMORY_REUSE_INTERSTAGE = 8;

const int AILIA_MEMORY_OPTIMAIZE_DEFAULT = 1;

const int AILIA_PROFILE_DISABLE = 0;

const int AILIA_PROFILE_AVERAGE = 1;

const int AILIA_IMAGE_FORMAT_RGBA = 0;

const int AILIA_IMAGE_FORMAT_BGRA = 1;

const int AILIA_IMAGE_FORMAT_RGB = 2;

const int AILIA_IMAGE_FORMAT_BGR = 3;

const int AILIA_IMAGE_FORMAT_RGBA_B2T = 16;

const int AILIA_IMAGE_FORMAT_BGRA_B2T = 17;

const int AILIA_NETWORK_IMAGE_FORMAT_BGR = 0;

const int AILIA_NETWORK_IMAGE_FORMAT_RGB = 1;

const int AILIA_NETWORK_IMAGE_FORMAT_GRAY = 2;

const int AILIA_NETWORK_IMAGE_FORMAT_GRAY_EQUALIZE = 3;

const int AILIA_NETWORK_IMAGE_CHANNEL_FIRST = 0;

const int AILIA_NETWORK_IMAGE_CHANNEL_LAST = 1;

const int AILIA_NETWORK_IMAGE_RANGE_UNSIGNED_INT8 = 0;

const int AILIA_NETWORK_IMAGE_RANGE_SIGNED_INT8 = 1;

const int AILIA_NETWORK_IMAGE_RANGE_UNSIGNED_FP32 = 2;

const int AILIA_NETWORK_IMAGE_RANGE_SIGNED_FP32 = 3;

const int AILIA_NETWORK_IMAGE_RANGE_IMAGENET = 4;

const int AILIA_CLASSIFIER_CLASS_VERSION = 1;

const int AILIA_DETECTOR_OBJECT_VERSION = 1;

const int AILIA_DETECTOR_ALGORITHM_YOLOV1 = 0;

const int AILIA_DETECTOR_ALGORITHM_YOLOV2 = 1;

const int AILIA_DETECTOR_ALGORITHM_YOLOV3 = 2;

const int AILIA_DETECTOR_ALGORITHM_YOLOV4 = 3;

const int AILIA_DETECTOR_ALGORITHM_YOLOX = 4;

const int AILIA_DETECTOR_ALGORITHM_SSD = 8;

const int AILIA_DETECTOR_FLAG_NORMAL = 0;

const int AILIA_FEATURE_EXTRACTOR_DISTANCE_L2NORM = 0;

const int AILIA_POSE_ESTIMATOR_ALGORITHM_ACCULUS_POSE = 0;

const int AILIA_POSE_ESTIMATOR_ALGORITHM_ACCULUS_FACE = 1;

const int AILIA_POSE_ESTIMATOR_ALGORITHM_ACCULUS_UPPOSE = 2;

const int AILIA_POSE_ESTIMATOR_ALGORITHM_ACCULUS_UPPOSE_FPGA = 3;

const int AILIA_POSE_ESTIMATOR_ALGORITHM_ACCULUS_HAND = 5;

const int AILIA_POSE_ESTIMATOR_ALGORITHM_OPEN_POSE = 10;

const int AILIA_POSE_ESTIMATOR_ALGORITHM_LW_HUMAN_POSE = 11;

const int AILIA_POSE_ESTIMATOR_ALGORITHM_OPEN_POSE_SINGLE_SCALE = 12;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_NOSE = 0;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_EYE_LEFT = 1;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_EYE_RIGHT = 2;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_EAR_LEFT = 3;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_EAR_RIGHT = 4;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_SHOULDER_LEFT = 5;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_SHOULDER_RIGHT = 6;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_ELBOW_LEFT = 7;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_ELBOW_RIGHT = 8;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_WRIST_LEFT = 9;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_WRIST_RIGHT = 10;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_HIP_LEFT = 11;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_HIP_RIGHT = 12;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_KNEE_LEFT = 13;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_KNEE_RIGHT = 14;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_ANKLE_LEFT = 15;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_ANKLE_RIGHT = 16;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_SHOULDER_CENTER = 17;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_BODY_CENTER = 18;

const int AILIA_POSE_ESTIMATOR_POSE_KEYPOINT_CNT = 19;

const int AILIA_POSE_ESTIMATOR_FACE_KEYPOINT_CNT = 68;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_NOSE = 0;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_EYE_LEFT = 1;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_EYE_RIGHT = 2;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_EAR_LEFT = 3;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_EAR_RIGHT = 4;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_SHOULDER_LEFT = 5;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_SHOULDER_RIGHT = 6;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_ELBOW_LEFT = 7;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_ELBOW_RIGHT = 8;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_WRIST_LEFT = 9;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_WRIST_RIGHT = 10;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_HIP_LEFT = 11;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_HIP_RIGHT = 12;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_SHOULDER_CENTER = 13;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_BODY_CENTER = 14;

const int AILIA_POSE_ESTIMATOR_UPPOSE_KEYPOINT_CNT = 15;

const int AILIA_POSE_ESTIMATOR_HAND_KEYPOINT_CNT = 21;

const int AILIA_POSE_ESTIMATOR_OBJECT_POSE_VERSION = 1;

const int AILIA_POSE_ESTIMATOR_OBJECT_FACE_VERSION = 1;

const int AILIA_POSE_ESTIMATOR_OBJECT_UPPOSE_VERSION = 1;

const int AILIA_POSE_ESTIMATOR_OBJECT_HAND_VERSION = 1;
